/*  Copyright (C) 2013 In2 Printing Solutions <info@in2ps.com>
    Author: Jose Maria Martinez

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
/****************************************************************************
**
** Metadata for OPCAutomation generated by dumpcpp from type library
** C:\WINDOWS\system32\OPCDAAuto.dll
**
****************************************************************************/

#define QAX_DUMPCPP_OPCAUTOMATION_NOINLINES
#include "opcautomation.h"

using namespace OPCAutomation;

static const uint qt_meta_data_OPCAutomation__IOPCAutoServer[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       16,    10, // methods
       16,    90, // properties
       8,    138, // enums/sets

 // signals: signature, parameters, type, tag, flags
       30, 69, 91, 92, 5,
       93, 118, 123, 124, 5,
       125, 151, 166, 167, 5,

 // slots: signature, parameters, type, tag, flags
       168, 185, 192, 193, 11,
       194, 220, 232, 233, 9,
       234, 250, 251, 263, 9,
       264, 277, 278, 279, 9,
       280, 300, 310, 318, 9,
       319, 393, 440, 441, 9,
       442, 458, 459, 468, 11,
       469, 493, 498, 507, 9,
       508, 577, 620, 621, 9,
       622, 648, 649, 658, 9,
       659, 741, 789, 790, 9,
       791, 814, 825, 826, 9,
       827, 844, 853, 854, 9,

 // properties: name, type, flags
       855, 865, 0x02005001, 		 // int Bandwidth
       869, 881, 0x02005001, 		 // int BuildNumber
       885, 896, 0x0a005003, 		 // QString ClientName
       904, 916, 0x10005001, 		 // QDateTime CurrentTime
       926, 941, 0x10005001, 		 // QDateTime LastUpdateTime
       951, 960, 0x02005003, 		 // int LocaleID
       964, 977, 0x02005001, 		 // int MajorVersion
       981, 994, 0x02005001, 		 // int MinorVersion
       998, 1008, 0x00005001, 		 // OPCGroups* OPCGroups
       1019, 1036, 0xff005001, 		 // QVariant PublicGroupNames
       1045, 1056, 0x0a005001, 		 // QString ServerName
       1064, 1075, 0x0a005001, 		 // QString ServerNode
       1083, 1095, 0x02005001, 		 // int ServerState
       1099, 1109, 0x10005001, 		 // QDateTime StartTime
       1119, 1130, 0x0a005001, 		 // QString VendorInfo
       1138, 1146, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       1154, 0x0, 2, 170, 
       1170, 0x0, 2, 174, 
       1184, 0x0, 16, 178, 
       1194, 0x0, 2, 210, 
       1212, 0x0, 4, 214, 
       1223, 0x0, 5, 222, 
       1240, 0x0, 13, 232, 
       1257, 0x0, 6, 258, 

 // enum data: key, value
       1272, OPCAutomation::OPCReadable,
       1284, OPCAutomation::OPCWritable,
       1296, OPCAutomation::OPCCache,
       1305, OPCAutomation::OPCDevice,
       1315, OPCAutomation::OPCInvalidHandle,
       1332, OPCAutomation::OPCBadType,
       1343, OPCAutomation::OPCPublic,
       1353, OPCAutomation::OPCBadRights,
       1366, OPCAutomation::OPCUnknownItemID,
       1383, OPCAutomation::OPCInvalidItemID,
       1400, OPCAutomation::OPCInvalidFilter,
       1417, OPCAutomation::OPCUnknownPath,
       1432, OPCAutomation::OPCRange,
       1441, OPCAutomation::OPCDuplicateName,
       1458, OPCAutomation::OPCUnsupportedRate,
       1477, OPCAutomation::OPCClamp,
       1486, OPCAutomation::OPCInuse,
       1495, OPCAutomation::OPCInvalidConfig,
       1512, OPCAutomation::OPCNotFound,
       1524, OPCAutomation::OPCInvalidPID,
       1538, OPCAutomation::OPCHierarchical,
       1554, OPCAutomation::OPCFlat,
       1562, OPCAutomation::OPCQualityMask,
       1577, OPCAutomation::OPCQualityBad,
       1591, OPCAutomation::OPCQualityUncertain,
       1611, OPCAutomation::OPCQualityGood,
       1626, OPCAutomation::OPCLimitMask,
       1639, OPCAutomation::OPCLimitOk,
       1650, OPCAutomation::OPCLimitLow,
       1662, OPCAutomation::OPCLimitHigh,
       1675, OPCAutomation::OPCLimitConst,
       1689, OPCAutomation::OPCStatusMask,
       1703, OPCAutomation::OPCStatusConfigError,
       1724, OPCAutomation::OPCStatusNotConnected,
       1746, OPCAutomation::OPCStatusDeviceFailure,
       1769, OPCAutomation::OPCStatusSensorFailure,
       1792, OPCAutomation::OPCStatusLastKnown,
       1811, OPCAutomation::OPCStatusCommFailure,
       1832, OPCAutomation::OPCStatusOutOfService,
       1854, OPCAutomation::OPCStatusLastUsable,
       1874, OPCAutomation::OPCStatusSensorCal,
       1893, OPCAutomation::OPCStatusEGUExceeded,
       1914, OPCAutomation::OPCStatusSubNormal,
       1933, OPCAutomation::OPCStatusLocalOverride,
       1956, OPCAutomation::OPCRunning,
       1967, OPCAutomation::OPCFailed,
       1977, OPCAutomation::OPCNoconfig,
       1989, OPCAutomation::OPCSuspended,
       2002, OPCAutomation::OPCTest,
       2010, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char qt_meta_enumstringdata_OPCAutomation[] = {
    "OPCAccessRights\0OPCDataSource\0OPCErrors\0OPCNamespaceTypes\0OPCQuality\0OPCQualityLimits\0OPCQualityStatus\0"
    "OPCServerState\0"
    "OPCReadable\0OPCWritable\0"
    "OPCCache\0OPCDevice\0"
    "OPCInvalidHandle\0OPCBadType\0OPCPublic\0OPCBadRights\0OPCUnknownItemID\0OPCInvalidItemID\0OPCInvalidFilter\0OPCUnknownPath\0OPCRange\0OPCDuplicateName\0"
    "OPCUnsupportedRate\0OPCClamp\0OPCInuse\0OPCInvalidConfig\0OPCNotFound\0OPCInvalidPID\0"
    "OPCHierarchical\0OPCFlat\0"
    "OPCQualityMask\0OPCQualityBad\0OPCQualityUncertain\0OPCQualityGood\0"
    "OPCLimitMask\0OPCLimitOk\0OPCLimitLow\0"
    "OPCLimitHigh\0OPCLimitConst\0"
    "OPCStatusMask\0OPCStatusConfigError\0OPCStatusNotConnected\0OPCStatusDeviceFailure\0OPCStatusSensorFailure\0OPCStatusLastKnown\0OPCStatusCommFailure\0OPCStatusOutOfService\0OPCStatusLastUsable\0"
    "OPCStatusSensorCal\0OPCStatusEGUExceeded\0OPCStatusSubNormal\0OPCStatusLocalOverride\0"
    "OPCRunning\0OPCFailed\0OPCNoconfig\0OPCSuspended\0OPCTest\0OPCDisconnected\0"

};

static const char *qt_meta_stringdata_OPCAutomation__IOPCAutoServer() {
    static const char stringdata0[] = {
    "OPCAutomation::IOPCAutoServer\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "Connect(QString)\0ProgID\0\0\0Connect(QString,QVariant)\0ProgID,Node\0"
    "\0\0CreateBrowser()\0\0OPCBrowser*\0\0Disconnect()\0\0\0\0GetErrorString(int)\0ErrorCode\0QString\0\0GetItemProperties(QString,int,QVariantList*,QVariantList&,QVariantList*&)\0ItemID,Count,PropertyIDs,PropertyValues,Errors\0"
    "\0\0GetOPCServers()\0\0QVariant\0\0GetOPCServers(QVariant)\0Node\0QVariant\0\0LookupItemIDs(QString,int,QVariantList*,QStringList&,QVariantList*&)\0ItemID,Count,PropertyIDs,NewItemIDs,Errors\0\0\0QueryAvailableLocaleIDs()\0"
    "\0QVariant\0\0QueryAvailableProperties(QString,int&,QVariantList*&,QStringList&,QVariantList*&)\0ItemID,Count,PropertyIDs,Descriptions,DataTypes\0\0\0SetClientName(QString)\0ClientName\0\0\0SetLocaleID(int)\0LocaleID\0"
    "\0\0"
    "Bandwidth\0int\0BuildNumber\0int\0ClientName\0QString\0CurrentTime\0QDateTime\0LastUpdateTime\0QDateTime\0LocaleID\0int\0MajorVersion\0int\0MinorVersion\0int\0OPCGroups\0OPCGroups*\0PublicGroupNames\0QVariant\0ServerName\0"
    "QString\0ServerNode\0QString\0ServerState\0int\0StartTime\0QDateTime\0VendorInfo\0QString\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject IOPCAutoServer::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__IOPCAutoServer(),
qt_meta_data_OPCAutomation__IOPCAutoServer }
};

void *IOPCAutoServer::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__IOPCAutoServer()))
        return static_cast<void*>(const_cast<IOPCAutoServer*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCGroups[] = {

 // content:
       1,       // revision
       0,       // classname
       2,    10, // classinfo
       14,    14, // methods
       8,    84, // properties
       8,    108, // enums/sets

 // classinfo: key, value
       25, 43, 
       60, 72, 

 // signals: signature, parameters, type, tag, flags
       83, 169, 250, 251, 5,

 // slots: signature, parameters, type, tag, flags
       252, 258, 259, 269, 11,
       270, 284, 289, 299, 9,
       300, 328, 333, 343, 9,
       344, 366, 380, 390, 9,
       391, 406, 420, 430, 9,
       431, 448, 462, 463, 9,
       464, 476, 477, 478, 9,
       479, 507, 521, 522, 9,
       523, 555, 576, 577, 9,
       578, 608, 629, 630, 9,
       631, 660, 681, 682, 9,
       683, 712, 733, 734, 9,
       735, 766, 789, 790, 9,

 // properties: name, type, flags
       791, 797, 0x02005001, 		 // int Count
       801, 822, 0x06005003, 		 // double DefaultGroupDeadband
       829, 850, 0x01005003, 		 // bool DefaultGroupIsActive
       855, 876, 0x02005003, 		 // int DefaultGroupLocaleID
       880, 901, 0x02005003, 		 // int DefaultGroupTimeBias
       905, 928, 0x02005003, 		 // int DefaultGroupUpdateRate
       932, 939, 0x00005001, 		 // IOPCAutoServer* Parent
       955, 964, 0x00001001, 		 // IUnknown* _NewEnum

 // enums: name, flags, count, data
       974, 0x0, 2, 140, 
       990, 0x0, 2, 144, 
       1004, 0x0, 16, 148, 
       1014, 0x0, 2, 180, 
       1032, 0x0, 4, 184, 
       1043, 0x0, 5, 192, 
       1060, 0x0, 13, 202, 
       1077, 0x0, 6, 228, 

 // enum data: key, value
       1092, OPCAutomation::OPCReadable,
       1104, OPCAutomation::OPCWritable,
       1116, OPCAutomation::OPCCache,
       1125, OPCAutomation::OPCDevice,
       1135, OPCAutomation::OPCInvalidHandle,
       1152, OPCAutomation::OPCBadType,
       1163, OPCAutomation::OPCPublic,
       1173, OPCAutomation::OPCBadRights,
       1186, OPCAutomation::OPCUnknownItemID,
       1203, OPCAutomation::OPCInvalidItemID,
       1220, OPCAutomation::OPCInvalidFilter,
       1237, OPCAutomation::OPCUnknownPath,
       1252, OPCAutomation::OPCRange,
       1261, OPCAutomation::OPCDuplicateName,
       1278, OPCAutomation::OPCUnsupportedRate,
       1297, OPCAutomation::OPCClamp,
       1306, OPCAutomation::OPCInuse,
       1315, OPCAutomation::OPCInvalidConfig,
       1332, OPCAutomation::OPCNotFound,
       1344, OPCAutomation::OPCInvalidPID,
       1358, OPCAutomation::OPCHierarchical,
       1374, OPCAutomation::OPCFlat,
       1382, OPCAutomation::OPCQualityMask,
       1397, OPCAutomation::OPCQualityBad,
       1411, OPCAutomation::OPCQualityUncertain,
       1431, OPCAutomation::OPCQualityGood,
       1446, OPCAutomation::OPCLimitMask,
       1459, OPCAutomation::OPCLimitOk,
       1470, OPCAutomation::OPCLimitLow,
       1482, OPCAutomation::OPCLimitHigh,
       1495, OPCAutomation::OPCLimitConst,
       1509, OPCAutomation::OPCStatusMask,
       1523, OPCAutomation::OPCStatusConfigError,
       1544, OPCAutomation::OPCStatusNotConnected,
       1566, OPCAutomation::OPCStatusDeviceFailure,
       1589, OPCAutomation::OPCStatusSensorFailure,
       1612, OPCAutomation::OPCStatusLastKnown,
       1631, OPCAutomation::OPCStatusCommFailure,
       1652, OPCAutomation::OPCStatusOutOfService,
       1674, OPCAutomation::OPCStatusLastUsable,
       1694, OPCAutomation::OPCStatusSensorCal,
       1713, OPCAutomation::OPCStatusEGUExceeded,
       1734, OPCAutomation::OPCStatusSubNormal,
       1753, OPCAutomation::OPCStatusLocalOverride,
       1776, OPCAutomation::OPCRunning,
       1787, OPCAutomation::OPCFailed,
       1797, OPCAutomation::OPCNoconfig,
       1809, OPCAutomation::OPCSuspended,
       1822, OPCAutomation::OPCTest,
       1830, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCGroups() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCGroups\0"
    "Event Interface 1\0DIOPCGroupsEvent\0Interface 0\0IOPCGroups\0"
    "GlobalDataChange(int,int,int,QVariantList*,QVariantList&,QVariantList*,QVariantList*)\0TransactionID,GroupHandle,NumItems,ClientHandles,ItemValues,Qualities,TimeStamps\0"
    "\0\0"
    "Add()\0\0OPCGroup*\0\0Add(QVariant)\0Name\0OPCGroup*\0\0ConnectPublicGroup(QString)\0Name\0OPCGroup*\0\0GetOPCGroup(QVariant)\0ItemSpecifier\0OPCGroup*\0\0Item(QVariant)\0ItemSpecifier\0OPCGroup*\0\0Remove(QVariant)\0ItemSpecifier\0"
    "\0\0RemoveAll()\0\0\0\0RemovePublicGroup(QVariant)\0ItemSpecifier\0\0\0SetDefaultGroupDeadband(double)\0DefaultGroupDeadband\0\0\0SetDefaultGroupIsActive(bool)\0DefaultGroupIsActive\0\0\0SetDefaultGroupLocaleID(int)\0DefaultGroupLocaleID\0"
    "\0\0SetDefaultGroupTimeBias(int)\0DefaultGroupTimeBias\0\0\0SetDefaultGroupUpdateRate(int)\0DefaultGroupUpdateRate\0\0\0"
    "Count\0int\0DefaultGroupDeadband\0double\0DefaultGroupIsActive\0bool\0DefaultGroupLocaleID\0int\0DefaultGroupTimeBias\0"
    "int\0DefaultGroupUpdateRate\0int\0Parent\0IOPCAutoServer*\0_NewEnum\0IUnknown*\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCGroups::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCGroups(),
qt_meta_data_OPCAutomation__OPCGroups }
};

void *OPCGroups::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCGroups()))
        return static_cast<void*>(const_cast<OPCGroups*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__IOPCGroups[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       16,    10, // methods
       9,    90, // properties
       8,    117, // enums/sets

 // signals: signature, parameters, type, tag, flags
       26, 65, 87, 88, 5,
       89, 114, 119, 120, 5,
       121, 147, 162, 163, 5,

 // slots: signature, parameters, type, tag, flags
       164, 170, 171, 181, 11,
       182, 196, 201, 211, 9,
       212, 240, 245, 255, 9,
       256, 278, 292, 302, 9,
       303, 318, 332, 342, 9,
       343, 360, 374, 375, 9,
       376, 388, 389, 390, 9,
       391, 419, 433, 434, 9,
       435, 467, 488, 489, 9,
       490, 520, 541, 542, 9,
       543, 572, 593, 594, 9,
       595, 624, 645, 646, 9,
       647, 678, 701, 702, 9,

 // properties: name, type, flags
       703, 709, 0x02005001, 		 // int Count
       713, 734, 0x06005003, 		 // double DefaultGroupDeadband
       741, 762, 0x01005003, 		 // bool DefaultGroupIsActive
       767, 788, 0x02005003, 		 // int DefaultGroupLocaleID
       792, 813, 0x02005003, 		 // int DefaultGroupTimeBias
       817, 840, 0x02005003, 		 // int DefaultGroupUpdateRate
       844, 851, 0x00005001, 		 // IOPCAutoServer* Parent
       867, 876, 0x00001001, 		 // IUnknown* _NewEnum
       886, 894, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       902, 0x0, 2, 149, 
       918, 0x0, 2, 153, 
       932, 0x0, 16, 157, 
       942, 0x0, 2, 189, 
       960, 0x0, 4, 193, 
       971, 0x0, 5, 201, 
       988, 0x0, 13, 211, 
       1005, 0x0, 6, 237, 

 // enum data: key, value
       1020, OPCAutomation::OPCReadable,
       1032, OPCAutomation::OPCWritable,
       1044, OPCAutomation::OPCCache,
       1053, OPCAutomation::OPCDevice,
       1063, OPCAutomation::OPCInvalidHandle,
       1080, OPCAutomation::OPCBadType,
       1091, OPCAutomation::OPCPublic,
       1101, OPCAutomation::OPCBadRights,
       1114, OPCAutomation::OPCUnknownItemID,
       1131, OPCAutomation::OPCInvalidItemID,
       1148, OPCAutomation::OPCInvalidFilter,
       1165, OPCAutomation::OPCUnknownPath,
       1180, OPCAutomation::OPCRange,
       1189, OPCAutomation::OPCDuplicateName,
       1206, OPCAutomation::OPCUnsupportedRate,
       1225, OPCAutomation::OPCClamp,
       1234, OPCAutomation::OPCInuse,
       1243, OPCAutomation::OPCInvalidConfig,
       1260, OPCAutomation::OPCNotFound,
       1272, OPCAutomation::OPCInvalidPID,
       1286, OPCAutomation::OPCHierarchical,
       1302, OPCAutomation::OPCFlat,
       1310, OPCAutomation::OPCQualityMask,
       1325, OPCAutomation::OPCQualityBad,
       1339, OPCAutomation::OPCQualityUncertain,
       1359, OPCAutomation::OPCQualityGood,
       1374, OPCAutomation::OPCLimitMask,
       1387, OPCAutomation::OPCLimitOk,
       1398, OPCAutomation::OPCLimitLow,
       1410, OPCAutomation::OPCLimitHigh,
       1423, OPCAutomation::OPCLimitConst,
       1437, OPCAutomation::OPCStatusMask,
       1451, OPCAutomation::OPCStatusConfigError,
       1472, OPCAutomation::OPCStatusNotConnected,
       1494, OPCAutomation::OPCStatusDeviceFailure,
       1517, OPCAutomation::OPCStatusSensorFailure,
       1540, OPCAutomation::OPCStatusLastKnown,
       1559, OPCAutomation::OPCStatusCommFailure,
       1580, OPCAutomation::OPCStatusOutOfService,
       1602, OPCAutomation::OPCStatusLastUsable,
       1622, OPCAutomation::OPCStatusSensorCal,
       1641, OPCAutomation::OPCStatusEGUExceeded,
       1662, OPCAutomation::OPCStatusSubNormal,
       1681, OPCAutomation::OPCStatusLocalOverride,
       1704, OPCAutomation::OPCRunning,
       1715, OPCAutomation::OPCFailed,
       1725, OPCAutomation::OPCNoconfig,
       1737, OPCAutomation::OPCSuspended,
       1750, OPCAutomation::OPCTest,
       1758, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__IOPCGroups() {
    static const char stringdata0[] = {
    "OPCAutomation::IOPCGroups\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "Add()\0\0OPCGroup*\0\0Add(QVariant)\0Name\0OPCGroup*\0\0ConnectPublicGroup(QString)\0"
    "Name\0OPCGroup*\0\0GetOPCGroup(QVariant)\0ItemSpecifier\0OPCGroup*\0\0Item(QVariant)\0ItemSpecifier\0OPCGroup*\0\0Remove(QVariant)\0ItemSpecifier\0\0\0RemoveAll()\0\0\0\0RemovePublicGroup(QVariant)\0ItemSpecifier\0\0\0SetDefaultGroupDeadband(double)\0"
    "DefaultGroupDeadband\0\0\0SetDefaultGroupIsActive(bool)\0DefaultGroupIsActive\0\0\0SetDefaultGroupLocaleID(int)\0DefaultGroupLocaleID\0\0\0SetDefaultGroupTimeBias(int)\0DefaultGroupTimeBias\0\0\0SetDefaultGroupUpdateRate(int)\0"
    "DefaultGroupUpdateRate\0\0\0"
    "Count\0int\0DefaultGroupDeadband\0double\0DefaultGroupIsActive\0bool\0DefaultGroupLocaleID\0int\0DefaultGroupTimeBias\0int\0DefaultGroupUpdateRate\0int\0Parent\0IOPCAutoServer*\0_NewEnum\0IUnknown*\0"
    "control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject IOPCGroups::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__IOPCGroups(),
qt_meta_data_OPCAutomation__IOPCGroups }
};

void *IOPCGroups::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__IOPCGroups()))
        return static_cast<void*>(const_cast<IOPCGroups*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCGroup[] = {

 // content:
       1,       // revision
       0,       // classname
       2,    10, // classinfo
       20,    14, // methods
       12,    114, // properties
       8,    150, // enums/sets

 // classinfo: key, value
       24, 42, 
       58, 70, 

 // signals: signature, parameters, type, tag, flags
       80, 105, 114, 115, 5,
       116, 213, 289, 290, 5,
       291, 347, 391, 392, 5,
       393, 469, 538, 539, 5,

 // slots: signature, parameters, type, tag, flags
       540, 557, 566, 567, 9,
       568, 621, 674, 675, 9,
       676, 703, 733, 734, 9,
       735, 803, 863, 864, 9,
       865, 886, 899, 900, 9,
       901, 921, 930, 931, 9,
       932, 950, 959, 960, 9,
       961, 983, 996, 997, 9,
       998, 1015, 1024, 1025, 9,
       1026, 1043, 1048, 1049, 9,
       1050, 1067, 1076, 1077, 9,
       1078, 1097, 1108, 1109, 9,
       1110, 1171, 1215, 1216, 11,
       1217, 1288, 1342, 1343, 11,
       1344, 1425, 1490, 1491, 9,
       1492, 1550, 1587, 1588, 9,

 // properties: name, type, flags
       1589, 1602, 0x02005003, 		 // int ClientHandle
       1606, 1615, 0x06005003, 		 // double DeadBand
       1622, 1631, 0x01005003, 		 // bool IsActive
       1636, 1645, 0x01005001, 		 // bool IsPublic
       1650, 1663, 0x01005003, 		 // bool IsSubscribed
       1668, 1677, 0x02005003, 		 // int LocaleID
       1681, 1686, 0x0a005003, 		 // QString Name
       1694, 1703, 0x00005001, 		 // OPCItems* OPCItems
       1713, 1720, 0x00005001, 		 // IOPCAutoServer* Parent
       1736, 1749, 0x02005001, 		 // int ServerHandle
       1753, 1762, 0x02005003, 		 // int TimeBias
       1766, 1777, 0x02005003, 		 // int UpdateRate

 // enums: name, flags, count, data
       1781, 0x0, 2, 182, 
       1797, 0x0, 2, 186, 
       1811, 0x0, 16, 190, 
       1821, 0x0, 2, 222, 
       1839, 0x0, 4, 226, 
       1850, 0x0, 5, 234, 
       1867, 0x0, 13, 244, 
       1884, 0x0, 6, 270, 

 // enum data: key, value
       1899, OPCAutomation::OPCReadable,
       1911, OPCAutomation::OPCWritable,
       1923, OPCAutomation::OPCCache,
       1932, OPCAutomation::OPCDevice,
       1942, OPCAutomation::OPCInvalidHandle,
       1959, OPCAutomation::OPCBadType,
       1970, OPCAutomation::OPCPublic,
       1980, OPCAutomation::OPCBadRights,
       1993, OPCAutomation::OPCUnknownItemID,
       2010, OPCAutomation::OPCInvalidItemID,
       2027, OPCAutomation::OPCInvalidFilter,
       2044, OPCAutomation::OPCUnknownPath,
       2059, OPCAutomation::OPCRange,
       2068, OPCAutomation::OPCDuplicateName,
       2085, OPCAutomation::OPCUnsupportedRate,
       2104, OPCAutomation::OPCClamp,
       2113, OPCAutomation::OPCInuse,
       2122, OPCAutomation::OPCInvalidConfig,
       2139, OPCAutomation::OPCNotFound,
       2151, OPCAutomation::OPCInvalidPID,
       2165, OPCAutomation::OPCHierarchical,
       2181, OPCAutomation::OPCFlat,
       2189, OPCAutomation::OPCQualityMask,
       2204, OPCAutomation::OPCQualityBad,
       2218, OPCAutomation::OPCQualityUncertain,
       2238, OPCAutomation::OPCQualityGood,
       2253, OPCAutomation::OPCLimitMask,
       2266, OPCAutomation::OPCLimitOk,
       2277, OPCAutomation::OPCLimitLow,
       2289, OPCAutomation::OPCLimitHigh,
       2302, OPCAutomation::OPCLimitConst,
       2316, OPCAutomation::OPCStatusMask,
       2330, OPCAutomation::OPCStatusConfigError,
       2351, OPCAutomation::OPCStatusNotConnected,
       2373, OPCAutomation::OPCStatusDeviceFailure,
       2396, OPCAutomation::OPCStatusSensorFailure,
       2419, OPCAutomation::OPCStatusLastKnown,
       2438, OPCAutomation::OPCStatusCommFailure,
       2459, OPCAutomation::OPCStatusOutOfService,
       2481, OPCAutomation::OPCStatusLastUsable,
       2501, OPCAutomation::OPCStatusSensorCal,
       2520, OPCAutomation::OPCStatusEGUExceeded,
       2541, OPCAutomation::OPCStatusSubNormal,
       2560, OPCAutomation::OPCStatusLocalOverride,
       2583, OPCAutomation::OPCRunning,
       2594, OPCAutomation::OPCFailed,
       2604, OPCAutomation::OPCNoconfig,
       2616, OPCAutomation::OPCSuspended,
       2629, OPCAutomation::OPCTest,
       2637, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCGroup() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCGroup\0"
    "Event Interface 1\0DIOPCGroupEvent\0Interface 0\0IOPCGroup\0"
    "AsyncCancelComplete(int)\0CancelID\0\0\0AsyncReadComplete(int,int,QVariantList*,QVariantList&,QVariantList*,QVariantList*,QVariantList*)\0TransactionID,NumItems,ClientHandles,ItemValues,Qualities,TimeStamps,Errors\0"
    "\0\0AsyncWriteComplete(int,int,QVariantList*,QVariantList*)\0TransactionID,NumItems,ClientHandles,Errors\0\0\0DataChange(int,int,QVariantList*,QVariantList&,QVariantList*,QVariantList*)\0TransactionID,NumItems,ClientHandles,ItemValues,Qualities,TimeStamps\0"
    "\0\0"
    "AsyncCancel(int)\0CancelID\0\0\0AsyncRead(int,QVariantList*,QVariantList*&,int,int&)\0NumItems,ServerHandles,Errors,TransactionID,CancelID\0\0\0AsyncRefresh(int,int,int&)\0Source,TransactionID,CancelID\0\0\0AsyncWrite(int,QVariantList*,QVariantList&,QVariantList*&,int,int&)\0"
    "NumItems,ServerHandles,Values,Errors,TransactionID,CancelID\0\0\0SetClientHandle(int)\0ClientHandle\0\0\0SetDeadBand(double)\0DeadBand\0\0\0SetIsActive(bool)\0IsActive\0\0\0SetIsSubscribed(bool)\0IsSubscribed\0\0\0SetLocaleID(int)\0"
    "LocaleID\0\0\0SetName(QString)\0Name\0\0\0SetTimeBias(int)\0TimeBias\0\0\0SetUpdateRate(int)\0UpdateRate\0\0\0SyncRead(int,int,QVariantList*,QVariantList&,QVariantList*&)\0Source,NumItems,ServerHandles,Values,Errors\0\0"
    "\0SyncRead(int,int,QVariantList*,QVariantList&,QVariantList*&,QVariant&)\0Source,NumItems,ServerHandles,Values,Errors,Qualities\0\0\0SyncRead(int,int,QVariantList*,QVariantList&,QVariantList*&,QVariant&,QVariant&)\0"
    "Source,NumItems,ServerHandles,Values,Errors,Qualities,TimeStamps\0\0\0SyncWrite(int,QVariantList*,QVariantList&,QVariantList*&)\0NumItems,ServerHandles,Values,Errors\0\0\0"
    "ClientHandle\0int\0DeadBand\0double\0IsActive\0"
    "bool\0IsPublic\0bool\0IsSubscribed\0bool\0LocaleID\0int\0Name\0QString\0OPCItems\0OPCItems*\0Parent\0IOPCAutoServer*\0ServerHandle\0int\0TimeBias\0int\0UpdateRate\0int\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCGroup::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCGroup(),
qt_meta_data_OPCAutomation__OPCGroup }
};

void *OPCGroup::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCGroup()))
        return static_cast<void*>(const_cast<OPCGroup*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__IOPCGroup[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       19,    10, // methods
       13,    105, // properties
       8,    144, // enums/sets

 // signals: signature, parameters, type, tag, flags
       25, 64, 86, 87, 5,
       88, 113, 118, 119, 5,
       120, 146, 161, 162, 5,

 // slots: signature, parameters, type, tag, flags
       163, 180, 189, 190, 9,
       191, 244, 297, 298, 9,
       299, 326, 356, 357, 9,
       358, 426, 486, 487, 9,
       488, 509, 522, 523, 9,
       524, 544, 553, 554, 9,
       555, 573, 582, 583, 9,
       584, 606, 619, 620, 9,
       621, 638, 647, 648, 9,
       649, 666, 671, 672, 9,
       673, 690, 699, 700, 9,
       701, 720, 731, 732, 9,
       733, 794, 838, 839, 11,
       840, 911, 965, 966, 11,
       967, 1048, 1113, 1114, 9,
       1115, 1173, 1210, 1211, 9,

 // properties: name, type, flags
       1212, 1225, 0x02005003, 		 // int ClientHandle
       1229, 1238, 0x06005003, 		 // double DeadBand
       1245, 1254, 0x01005003, 		 // bool IsActive
       1259, 1268, 0x01005001, 		 // bool IsPublic
       1273, 1286, 0x01005003, 		 // bool IsSubscribed
       1291, 1300, 0x02005003, 		 // int LocaleID
       1304, 1309, 0x0a005003, 		 // QString Name
       1317, 1326, 0x00005001, 		 // OPCItems* OPCItems
       1336, 1343, 0x00005001, 		 // IOPCAutoServer* Parent
       1359, 1372, 0x02005001, 		 // int ServerHandle
       1376, 1385, 0x02005003, 		 // int TimeBias
       1389, 1400, 0x02005003, 		 // int UpdateRate
       1404, 1412, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       1420, 0x0, 2, 176, 
       1436, 0x0, 2, 180, 
       1450, 0x0, 16, 184, 
       1460, 0x0, 2, 216, 
       1478, 0x0, 4, 220, 
       1489, 0x0, 5, 228, 
       1506, 0x0, 13, 238, 
       1523, 0x0, 6, 264, 

 // enum data: key, value
       1538, OPCAutomation::OPCReadable,
       1550, OPCAutomation::OPCWritable,
       1562, OPCAutomation::OPCCache,
       1571, OPCAutomation::OPCDevice,
       1581, OPCAutomation::OPCInvalidHandle,
       1598, OPCAutomation::OPCBadType,
       1609, OPCAutomation::OPCPublic,
       1619, OPCAutomation::OPCBadRights,
       1632, OPCAutomation::OPCUnknownItemID,
       1649, OPCAutomation::OPCInvalidItemID,
       1666, OPCAutomation::OPCInvalidFilter,
       1683, OPCAutomation::OPCUnknownPath,
       1698, OPCAutomation::OPCRange,
       1707, OPCAutomation::OPCDuplicateName,
       1724, OPCAutomation::OPCUnsupportedRate,
       1743, OPCAutomation::OPCClamp,
       1752, OPCAutomation::OPCInuse,
       1761, OPCAutomation::OPCInvalidConfig,
       1778, OPCAutomation::OPCNotFound,
       1790, OPCAutomation::OPCInvalidPID,
       1804, OPCAutomation::OPCHierarchical,
       1820, OPCAutomation::OPCFlat,
       1828, OPCAutomation::OPCQualityMask,
       1843, OPCAutomation::OPCQualityBad,
       1857, OPCAutomation::OPCQualityUncertain,
       1877, OPCAutomation::OPCQualityGood,
       1892, OPCAutomation::OPCLimitMask,
       1905, OPCAutomation::OPCLimitOk,
       1916, OPCAutomation::OPCLimitLow,
       1928, OPCAutomation::OPCLimitHigh,
       1941, OPCAutomation::OPCLimitConst,
       1955, OPCAutomation::OPCStatusMask,
       1969, OPCAutomation::OPCStatusConfigError,
       1990, OPCAutomation::OPCStatusNotConnected,
       2012, OPCAutomation::OPCStatusDeviceFailure,
       2035, OPCAutomation::OPCStatusSensorFailure,
       2058, OPCAutomation::OPCStatusLastKnown,
       2077, OPCAutomation::OPCStatusCommFailure,
       2098, OPCAutomation::OPCStatusOutOfService,
       2120, OPCAutomation::OPCStatusLastUsable,
       2140, OPCAutomation::OPCStatusSensorCal,
       2159, OPCAutomation::OPCStatusEGUExceeded,
       2180, OPCAutomation::OPCStatusSubNormal,
       2199, OPCAutomation::OPCStatusLocalOverride,
       2222, OPCAutomation::OPCRunning,
       2233, OPCAutomation::OPCFailed,
       2243, OPCAutomation::OPCNoconfig,
       2255, OPCAutomation::OPCSuspended,
       2268, OPCAutomation::OPCTest,
       2276, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__IOPCGroup() {
    static const char stringdata0[] = {
    "OPCAutomation::IOPCGroup\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AsyncCancel(int)\0CancelID\0\0\0AsyncRead(int,QVariantList*,QVariantList*&,int,int&)\0"
    "NumItems,ServerHandles,Errors,TransactionID,CancelID\0\0\0AsyncRefresh(int,int,int&)\0Source,TransactionID,CancelID\0\0\0AsyncWrite(int,QVariantList*,QVariantList&,QVariantList*&,int,int&)\0NumItems,ServerHandles,Values,Errors,TransactionID,CancelID\0"
    "\0\0SetClientHandle(int)\0ClientHandle\0\0\0SetDeadBand(double)\0DeadBand\0\0\0SetIsActive(bool)\0IsActive\0\0\0SetIsSubscribed(bool)\0IsSubscribed\0\0\0SetLocaleID(int)\0LocaleID\0\0\0SetName(QString)\0Name\0\0\0SetTimeBias(int)\0"
    "TimeBias\0\0\0SetUpdateRate(int)\0UpdateRate\0\0\0SyncRead(int,int,QVariantList*,QVariantList&,QVariantList*&)\0Source,NumItems,ServerHandles,Values,Errors\0\0\0SyncRead(int,int,QVariantList*,QVariantList&,QVariantList*&,QVariant&)\0"
    "Source,NumItems,ServerHandles,Values,Errors,Qualities\0\0\0SyncRead(int,int,QVariantList*,QVariantList&,QVariantList*&,QVariant&,QVariant&)\0Source,NumItems,ServerHandles,Values,Errors,Qualities,TimeStamps\0"
    "\0\0SyncWrite(int,QVariantList*,QVariantList&,QVariantList*&)\0NumItems,ServerHandles,Values,Errors\0\0\0"
    "ClientHandle\0int\0DeadBand\0double\0IsActive\0bool\0IsPublic\0bool\0IsSubscribed\0bool\0LocaleID\0int\0Name\0QString\0"
    "OPCItems\0OPCItems*\0Parent\0IOPCAutoServer*\0ServerHandle\0int\0TimeBias\0int\0UpdateRate\0int\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject IOPCGroup::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__IOPCGroup(),
qt_meta_data_OPCAutomation__IOPCGroup }
};

void *IOPCGroup::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__IOPCGroup()))
        return static_cast<void*>(const_cast<IOPCGroup*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCItems[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       19,    10, // methods
       7,    105, // properties
       8,    126, // enums/sets

 // signals: signature, parameters, type, tag, flags
       24, 63, 85, 86, 5,
       87, 112, 117, 118, 5,
       119, 145, 160, 161, 5,

 // slots: signature, parameters, type, tag, flags
       162, 183, 203, 212, 9,
       213, 284, 336, 337, 11,
       338, 418, 489, 490, 11,
       491, 580, 663, 664, 9,
       665, 681, 694, 703, 9,
       704, 719, 733, 742, 9,
       743, 784, 814, 815, 9,
       816, 865, 907, 908, 9,
       909, 974, 1018, 1019, 9,
       1020, 1081, 1130, 1131, 9,
       1132, 1162, 1180, 1181, 9,
       1182, 1207, 1223, 1224, 9,
       1225, 1258, 1283, 1284, 9,
       1285, 1327, 1351, 1352, 11,
       1353, 1404, 1447, 1448, 11,
       1449, 1509, 1564, 1565, 9,

 // properties: name, type, flags
       1566, 1572, 0x02005001, 		 // int Count
       1576, 1594, 0x0a005003, 		 // QString DefaultAccessPath
       1602, 1618, 0x01005003, 		 // bool DefaultIsActive
       1623, 1648, 0x02005003, 		 // int DefaultRequestedDataType
       1652, 1659, 0x00005001, 		 // OPCGroup* Parent
       1669, 1678, 0x00001001, 		 // IUnknown* _NewEnum
       1688, 1696, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       1704, 0x0, 2, 158, 
       1720, 0x0, 2, 162, 
       1734, 0x0, 16, 166, 
       1744, 0x0, 2, 198, 
       1762, 0x0, 4, 202, 
       1773, 0x0, 5, 210, 
       1790, 0x0, 13, 220, 
       1807, 0x0, 6, 246, 

 // enum data: key, value
       1822, OPCAutomation::OPCReadable,
       1834, OPCAutomation::OPCWritable,
       1846, OPCAutomation::OPCCache,
       1855, OPCAutomation::OPCDevice,
       1865, OPCAutomation::OPCInvalidHandle,
       1882, OPCAutomation::OPCBadType,
       1893, OPCAutomation::OPCPublic,
       1903, OPCAutomation::OPCBadRights,
       1916, OPCAutomation::OPCUnknownItemID,
       1933, OPCAutomation::OPCInvalidItemID,
       1950, OPCAutomation::OPCInvalidFilter,
       1967, OPCAutomation::OPCUnknownPath,
       1982, OPCAutomation::OPCRange,
       1991, OPCAutomation::OPCDuplicateName,
       2008, OPCAutomation::OPCUnsupportedRate,
       2027, OPCAutomation::OPCClamp,
       2036, OPCAutomation::OPCInuse,
       2045, OPCAutomation::OPCInvalidConfig,
       2062, OPCAutomation::OPCNotFound,
       2074, OPCAutomation::OPCInvalidPID,
       2088, OPCAutomation::OPCHierarchical,
       2104, OPCAutomation::OPCFlat,
       2112, OPCAutomation::OPCQualityMask,
       2127, OPCAutomation::OPCQualityBad,
       2141, OPCAutomation::OPCQualityUncertain,
       2161, OPCAutomation::OPCQualityGood,
       2176, OPCAutomation::OPCLimitMask,
       2189, OPCAutomation::OPCLimitOk,
       2200, OPCAutomation::OPCLimitLow,
       2212, OPCAutomation::OPCLimitHigh,
       2225, OPCAutomation::OPCLimitConst,
       2239, OPCAutomation::OPCStatusMask,
       2253, OPCAutomation::OPCStatusConfigError,
       2274, OPCAutomation::OPCStatusNotConnected,
       2296, OPCAutomation::OPCStatusDeviceFailure,
       2319, OPCAutomation::OPCStatusSensorFailure,
       2342, OPCAutomation::OPCStatusLastKnown,
       2361, OPCAutomation::OPCStatusCommFailure,
       2382, OPCAutomation::OPCStatusOutOfService,
       2404, OPCAutomation::OPCStatusLastUsable,
       2424, OPCAutomation::OPCStatusSensorCal,
       2443, OPCAutomation::OPCStatusEGUExceeded,
       2464, OPCAutomation::OPCStatusSubNormal,
       2483, OPCAutomation::OPCStatusLocalOverride,
       2506, OPCAutomation::OPCRunning,
       2517, OPCAutomation::OPCFailed,
       2527, OPCAutomation::OPCNoconfig,
       2539, OPCAutomation::OPCSuspended,
       2552, OPCAutomation::OPCTest,
       2560, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCItems() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCItems\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AddItem(QString,int)\0ItemID,ClientHandle\0OPCItem*\0\0AddItems(int,QStringList&,QVariantList*,QVariantList*&,QVariantList*&)\0"
    "NumItems,ItemIDs,ClientHandles,ServerHandles,Errors\0\0\0AddItems(int,QStringList&,QVariantList*,QVariantList*&,QVariantList*&,QVariant)\0NumItems,ItemIDs,ClientHandles,ServerHandles,Errors,RequestedDataTypes\0"
    "\0\0AddItems(int,QStringList&,QVariantList*,QVariantList*&,QVariantList*&,QVariant,QVariant)\0NumItems,ItemIDs,ClientHandles,ServerHandles,Errors,RequestedDataTypes,AccessPaths\0\0\0GetOPCItem(int)\0ServerHandle\0"
    "OPCItem*\0\0Item(QVariant)\0ItemSpecifier\0OPCItem*\0\0Remove(int,QVariantList*,QVariantList*&)\0NumItems,ServerHandles,Errors\0\0\0SetActive(int,QVariantList*,bool,QVariantList*&)\0NumItems,ServerHandles,ActiveState,Errors\0"
    "\0\0SetClientHandles(int,QVariantList*,QVariantList*,QVariantList*&)\0NumItems,ServerHandles,ClientHandles,Errors\0\0\0SetDataTypes(int,QVariantList*,QVariantList*,QVariantList*&)\0NumItems,ServerHandles,RequestedDataTypes,Errors\0"
    "\0\0SetDefaultAccessPath(QString)\0DefaultAccessPath\0\0\0SetDefaultIsActive(bool)\0DefaultIsActive\0\0\0SetDefaultRequestedDataType(int)\0DefaultRequestedDataType\0\0\0Validate(int,QStringList&,QVariantList*&)\0NumItems,ItemIDs,Errors\0"
    "\0\0Validate(int,QStringList&,QVariantList*&,QVariant)\0NumItems,ItemIDs,Errors,RequestedDataTypes\0\0\0Validate(int,QStringList&,QVariantList*&,QVariant,QVariant)\0NumItems,ItemIDs,Errors,RequestedDataTypes,AccessPaths\0"
    "\0\0"
    "Count\0int\0DefaultAccessPath\0QString\0DefaultIsActive\0bool\0DefaultRequestedDataType\0int\0Parent\0OPCGroup*\0_NewEnum\0IUnknown*\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCItems::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCItems(),
qt_meta_data_OPCAutomation__OPCItems }
};

void *OPCItems::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCItems()))
        return static_cast<void*>(const_cast<OPCItems*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCItem[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       11,    10, // methods
       15,    65, // properties
       8,    110, // enums/sets

 // signals: signature, parameters, type, tag, flags
       23, 62, 84, 85, 5,
       86, 111, 116, 117, 5,
       118, 144, 159, 160, 5,

 // slots: signature, parameters, type, tag, flags
       161, 171, 178, 179, 11,
       180, 200, 213, 214, 11,
       215, 245, 266, 267, 11,
       268, 308, 339, 340, 9,
       341, 362, 375, 376, 9,
       377, 395, 404, 405, 9,
       406, 432, 450, 451, 9,
       452, 468, 474, 475, 9,

 // properties: name, type, flags
       476, 487, 0x0a005001, 		 // QString AccessPath
       495, 508, 0x02005001, 		 // int AccessRights
       512, 530, 0x02005001, 		 // int CanonicalDataType
       534, 547, 0x02005003, 		 // int ClientHandle
       551, 558, 0xff005001, 		 // QVariant EUInfo
       567, 574, 0x02005001, 		 // int EUType
       578, 587, 0x01005003, 		 // bool IsActive
       592, 599, 0x0a005001, 		 // QString ItemID
       607, 614, 0x00005001, 		 // OPCGroup* Parent
       624, 632, 0x02005001, 		 // int Quality
       636, 654, 0x02005003, 		 // int RequestedDataType
       658, 671, 0x02005001, 		 // int ServerHandle
       675, 685, 0x10005001, 		 // QDateTime TimeStamp
       695, 701, 0xff005001, 		 // QVariant Value
       710, 718, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       726, 0x0, 2, 142, 
       742, 0x0, 2, 146, 
       756, 0x0, 16, 150, 
       766, 0x0, 2, 182, 
       784, 0x0, 4, 186, 
       795, 0x0, 5, 194, 
       812, 0x0, 13, 204, 
       829, 0x0, 6, 230, 

 // enum data: key, value
       844, OPCAutomation::OPCReadable,
       856, OPCAutomation::OPCWritable,
       868, OPCAutomation::OPCCache,
       877, OPCAutomation::OPCDevice,
       887, OPCAutomation::OPCInvalidHandle,
       904, OPCAutomation::OPCBadType,
       915, OPCAutomation::OPCPublic,
       925, OPCAutomation::OPCBadRights,
       938, OPCAutomation::OPCUnknownItemID,
       955, OPCAutomation::OPCInvalidItemID,
       972, OPCAutomation::OPCInvalidFilter,
       989, OPCAutomation::OPCUnknownPath,
       1004, OPCAutomation::OPCRange,
       1013, OPCAutomation::OPCDuplicateName,
       1030, OPCAutomation::OPCUnsupportedRate,
       1049, OPCAutomation::OPCClamp,
       1058, OPCAutomation::OPCInuse,
       1067, OPCAutomation::OPCInvalidConfig,
       1084, OPCAutomation::OPCNotFound,
       1096, OPCAutomation::OPCInvalidPID,
       1110, OPCAutomation::OPCHierarchical,
       1126, OPCAutomation::OPCFlat,
       1134, OPCAutomation::OPCQualityMask,
       1149, OPCAutomation::OPCQualityBad,
       1163, OPCAutomation::OPCQualityUncertain,
       1183, OPCAutomation::OPCQualityGood,
       1198, OPCAutomation::OPCLimitMask,
       1211, OPCAutomation::OPCLimitOk,
       1222, OPCAutomation::OPCLimitLow,
       1234, OPCAutomation::OPCLimitHigh,
       1247, OPCAutomation::OPCLimitConst,
       1261, OPCAutomation::OPCStatusMask,
       1275, OPCAutomation::OPCStatusConfigError,
       1296, OPCAutomation::OPCStatusNotConnected,
       1318, OPCAutomation::OPCStatusDeviceFailure,
       1341, OPCAutomation::OPCStatusSensorFailure,
       1364, OPCAutomation::OPCStatusLastKnown,
       1383, OPCAutomation::OPCStatusCommFailure,
       1404, OPCAutomation::OPCStatusOutOfService,
       1426, OPCAutomation::OPCStatusLastUsable,
       1446, OPCAutomation::OPCStatusSensorCal,
       1465, OPCAutomation::OPCStatusEGUExceeded,
       1486, OPCAutomation::OPCStatusSubNormal,
       1505, OPCAutomation::OPCStatusLocalOverride,
       1528, OPCAutomation::OPCRunning,
       1539, OPCAutomation::OPCFailed,
       1549, OPCAutomation::OPCNoconfig,
       1561, OPCAutomation::OPCSuspended,
       1574, OPCAutomation::OPCTest,
       1582, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCItem() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCItem\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "Read(int)\0Source\0\0\0Read(int,QVariant&)\0Source,Value\0\0\0Read(int,QVariant&,QVariant&)\0"
    "Source,Value,Quality\0\0\0Read(int,QVariant&,QVariant&,QVariant&)\0Source,Value,Quality,TimeStamp\0\0\0SetClientHandle(int)\0ClientHandle\0\0\0SetIsActive(bool)\0IsActive\0\0\0SetRequestedDataType(int)\0RequestedDataType\0"
    "\0\0Write(QVariant)\0Value\0\0\0"
    "AccessPath\0QString\0AccessRights\0int\0CanonicalDataType\0int\0ClientHandle\0int\0EUInfo\0QVariant\0EUType\0int\0IsActive\0bool\0ItemID\0QString\0Parent\0OPCGroup*\0Quality\0int\0RequestedDataType\0"
    "int\0ServerHandle\0int\0TimeStamp\0QDateTime\0Value\0QVariant\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCItem::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCItem(),
qt_meta_data_OPCAutomation__OPCItem }
};

void *OPCItem::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCItem()))
        return static_cast<void*>(const_cast<OPCItem*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__DIOPCGroupEvent[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       7,    10, // methods
       1,    45, // properties
       8,    48, // enums/sets

 // signals: signature, parameters, type, tag, flags
       31, 70, 92, 93, 5,
       94, 119, 124, 125, 5,
       126, 152, 167, 168, 5,

 // slots: signature, parameters, type, tag, flags
       169, 194, 203, 204, 9,
       205, 302, 378, 379, 9,
       380, 436, 480, 481, 9,
       482, 558, 627, 628, 9,

 // properties: name, type, flags
       629, 637, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       645, 0x0, 2, 80, 
       661, 0x0, 2, 84, 
       675, 0x0, 16, 88, 
       685, 0x0, 2, 120, 
       703, 0x0, 4, 124, 
       714, 0x0, 5, 132, 
       731, 0x0, 13, 142, 
       748, 0x0, 6, 168, 

 // enum data: key, value
       763, OPCAutomation::OPCReadable,
       775, OPCAutomation::OPCWritable,
       787, OPCAutomation::OPCCache,
       796, OPCAutomation::OPCDevice,
       806, OPCAutomation::OPCInvalidHandle,
       823, OPCAutomation::OPCBadType,
       834, OPCAutomation::OPCPublic,
       844, OPCAutomation::OPCBadRights,
       857, OPCAutomation::OPCUnknownItemID,
       874, OPCAutomation::OPCInvalidItemID,
       891, OPCAutomation::OPCInvalidFilter,
       908, OPCAutomation::OPCUnknownPath,
       923, OPCAutomation::OPCRange,
       932, OPCAutomation::OPCDuplicateName,
       949, OPCAutomation::OPCUnsupportedRate,
       968, OPCAutomation::OPCClamp,
       977, OPCAutomation::OPCInuse,
       986, OPCAutomation::OPCInvalidConfig,
       1003, OPCAutomation::OPCNotFound,
       1015, OPCAutomation::OPCInvalidPID,
       1029, OPCAutomation::OPCHierarchical,
       1045, OPCAutomation::OPCFlat,
       1053, OPCAutomation::OPCQualityMask,
       1068, OPCAutomation::OPCQualityBad,
       1082, OPCAutomation::OPCQualityUncertain,
       1102, OPCAutomation::OPCQualityGood,
       1117, OPCAutomation::OPCLimitMask,
       1130, OPCAutomation::OPCLimitOk,
       1141, OPCAutomation::OPCLimitLow,
       1153, OPCAutomation::OPCLimitHigh,
       1166, OPCAutomation::OPCLimitConst,
       1180, OPCAutomation::OPCStatusMask,
       1194, OPCAutomation::OPCStatusConfigError,
       1215, OPCAutomation::OPCStatusNotConnected,
       1237, OPCAutomation::OPCStatusDeviceFailure,
       1260, OPCAutomation::OPCStatusSensorFailure,
       1283, OPCAutomation::OPCStatusLastKnown,
       1302, OPCAutomation::OPCStatusCommFailure,
       1323, OPCAutomation::OPCStatusOutOfService,
       1345, OPCAutomation::OPCStatusLastUsable,
       1365, OPCAutomation::OPCStatusSensorCal,
       1384, OPCAutomation::OPCStatusEGUExceeded,
       1405, OPCAutomation::OPCStatusSubNormal,
       1424, OPCAutomation::OPCStatusLocalOverride,
       1447, OPCAutomation::OPCRunning,
       1458, OPCAutomation::OPCFailed,
       1468, OPCAutomation::OPCNoconfig,
       1480, OPCAutomation::OPCSuspended,
       1493, OPCAutomation::OPCTest,
       1501, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__DIOPCGroupEvent() {
    static const char stringdata0[] = {
    "OPCAutomation::DIOPCGroupEvent\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AsyncCancelComplete(int)\0CancelID\0\0\0AsyncReadComplete(int,int,QVariantList*,QVariantList&,QVariantList*,QVariantList*,QVariantList*)\0"
    "TransactionID,NumItems,ClientHandles,ItemValues,Qualities,TimeStamps,Errors\0\0\0AsyncWriteComplete(int,int,QVariantList*,QVariantList*)\0TransactionID,NumItems,ClientHandles,Errors\0\0\0DataChange(int,int,QVariantList*,QVariantList&,QVariantList*,QVariantList*)\0"
    "TransactionID,NumItems,ClientHandles,ItemValues,Qualities,TimeStamps\0\0\0"
    "control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject DIOPCGroupEvent::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__DIOPCGroupEvent(),
qt_meta_data_OPCAutomation__DIOPCGroupEvent }
};

void *DIOPCGroupEvent::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__DIOPCGroupEvent()))
        return static_cast<void*>(const_cast<DIOPCGroupEvent*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__DIOPCGroupsEvent[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       4,    10, // methods
       1,    30, // properties
       8,    33, // enums/sets

 // signals: signature, parameters, type, tag, flags
       32, 71, 93, 94, 5,
       95, 120, 125, 126, 5,
       127, 153, 168, 169, 5,

 // slots: signature, parameters, type, tag, flags
       170, 256, 337, 338, 9,

 // properties: name, type, flags
       339, 347, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       355, 0x0, 2, 65, 
       371, 0x0, 2, 69, 
       385, 0x0, 16, 73, 
       395, 0x0, 2, 105, 
       413, 0x0, 4, 109, 
       424, 0x0, 5, 117, 
       441, 0x0, 13, 127, 
       458, 0x0, 6, 153, 

 // enum data: key, value
       473, OPCAutomation::OPCReadable,
       485, OPCAutomation::OPCWritable,
       497, OPCAutomation::OPCCache,
       506, OPCAutomation::OPCDevice,
       516, OPCAutomation::OPCInvalidHandle,
       533, OPCAutomation::OPCBadType,
       544, OPCAutomation::OPCPublic,
       554, OPCAutomation::OPCBadRights,
       567, OPCAutomation::OPCUnknownItemID,
       584, OPCAutomation::OPCInvalidItemID,
       601, OPCAutomation::OPCInvalidFilter,
       618, OPCAutomation::OPCUnknownPath,
       633, OPCAutomation::OPCRange,
       642, OPCAutomation::OPCDuplicateName,
       659, OPCAutomation::OPCUnsupportedRate,
       678, OPCAutomation::OPCClamp,
       687, OPCAutomation::OPCInuse,
       696, OPCAutomation::OPCInvalidConfig,
       713, OPCAutomation::OPCNotFound,
       725, OPCAutomation::OPCInvalidPID,
       739, OPCAutomation::OPCHierarchical,
       755, OPCAutomation::OPCFlat,
       763, OPCAutomation::OPCQualityMask,
       778, OPCAutomation::OPCQualityBad,
       792, OPCAutomation::OPCQualityUncertain,
       812, OPCAutomation::OPCQualityGood,
       827, OPCAutomation::OPCLimitMask,
       840, OPCAutomation::OPCLimitOk,
       851, OPCAutomation::OPCLimitLow,
       863, OPCAutomation::OPCLimitHigh,
       876, OPCAutomation::OPCLimitConst,
       890, OPCAutomation::OPCStatusMask,
       904, OPCAutomation::OPCStatusConfigError,
       925, OPCAutomation::OPCStatusNotConnected,
       947, OPCAutomation::OPCStatusDeviceFailure,
       970, OPCAutomation::OPCStatusSensorFailure,
       993, OPCAutomation::OPCStatusLastKnown,
       1012, OPCAutomation::OPCStatusCommFailure,
       1033, OPCAutomation::OPCStatusOutOfService,
       1055, OPCAutomation::OPCStatusLastUsable,
       1075, OPCAutomation::OPCStatusSensorCal,
       1094, OPCAutomation::OPCStatusEGUExceeded,
       1115, OPCAutomation::OPCStatusSubNormal,
       1134, OPCAutomation::OPCStatusLocalOverride,
       1157, OPCAutomation::OPCRunning,
       1168, OPCAutomation::OPCFailed,
       1178, OPCAutomation::OPCNoconfig,
       1190, OPCAutomation::OPCSuspended,
       1203, OPCAutomation::OPCTest,
       1211, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__DIOPCGroupsEvent() {
    static const char stringdata0[] = {
    "OPCAutomation::DIOPCGroupsEvent\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "GlobalDataChange(int,int,int,QVariantList*,QVariantList&,QVariantList*,QVariantList*)\0"
    "TransactionID,GroupHandle,NumItems,ClientHandles,ItemValues,Qualities,TimeStamps\0\0\0"
    "control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject DIOPCGroupsEvent::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__DIOPCGroupsEvent(),
qt_meta_data_OPCAutomation__DIOPCGroupsEvent }
};

void *DIOPCGroupsEvent::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__DIOPCGroupsEvent()))
        return static_cast<void*>(const_cast<DIOPCGroupsEvent*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCBrowser[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       16,    10, // methods
       8,    90, // properties
       8,    114, // enums/sets

 // signals: signature, parameters, type, tag, flags
       26, 65, 87, 88, 5,
       89, 114, 119, 120, 5,
       121, 147, 162, 163, 5,

 // slots: signature, parameters, type, tag, flags
       164, 188, 195, 204, 9,
       205, 224, 229, 237, 9,
       238, 253, 267, 275, 9,
       276, 294, 301, 302, 9,
       303, 324, 333, 334, 9,
       335, 348, 349, 350, 9,
       351, 360, 361, 362, 9,
       363, 384, 397, 398, 9,
       399, 416, 425, 426, 9,
       427, 446, 453, 454, 9,
       455, 470, 471, 472, 9,
       473, 485, 486, 487, 11,
       488, 508, 513, 514, 9,

 // properties: name, type, flags
       515, 528, 0x02005003, 		 // int AccessRights
       532, 538, 0x02005001, 		 // int Count
       542, 558, 0x0a005001, 		 // QString CurrentPosition
       566, 575, 0x02005003, 		 // int DataType
       579, 586, 0x0a005003, 		 // QString Filter
       594, 607, 0x02005001, 		 // int Organization
       611, 620, 0x00001001, 		 // IUnknown* _NewEnum
       630, 638, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       646, 0x0, 2, 146, 
       662, 0x0, 2, 150, 
       676, 0x0, 16, 154, 
       686, 0x0, 2, 186, 
       704, 0x0, 4, 190, 
       715, 0x0, 5, 198, 
       732, 0x0, 13, 208, 
       749, 0x0, 6, 234, 

 // enum data: key, value
       764, OPCAutomation::OPCReadable,
       776, OPCAutomation::OPCWritable,
       788, OPCAutomation::OPCCache,
       797, OPCAutomation::OPCDevice,
       807, OPCAutomation::OPCInvalidHandle,
       824, OPCAutomation::OPCBadType,
       835, OPCAutomation::OPCPublic,
       845, OPCAutomation::OPCBadRights,
       858, OPCAutomation::OPCUnknownItemID,
       875, OPCAutomation::OPCInvalidItemID,
       892, OPCAutomation::OPCInvalidFilter,
       909, OPCAutomation::OPCUnknownPath,
       924, OPCAutomation::OPCRange,
       933, OPCAutomation::OPCDuplicateName,
       950, OPCAutomation::OPCUnsupportedRate,
       969, OPCAutomation::OPCClamp,
       978, OPCAutomation::OPCInuse,
       987, OPCAutomation::OPCInvalidConfig,
       1004, OPCAutomation::OPCNotFound,
       1016, OPCAutomation::OPCInvalidPID,
       1030, OPCAutomation::OPCHierarchical,
       1046, OPCAutomation::OPCFlat,
       1054, OPCAutomation::OPCQualityMask,
       1069, OPCAutomation::OPCQualityBad,
       1083, OPCAutomation::OPCQualityUncertain,
       1103, OPCAutomation::OPCQualityGood,
       1118, OPCAutomation::OPCLimitMask,
       1131, OPCAutomation::OPCLimitOk,
       1142, OPCAutomation::OPCLimitLow,
       1154, OPCAutomation::OPCLimitHigh,
       1167, OPCAutomation::OPCLimitConst,
       1181, OPCAutomation::OPCStatusMask,
       1195, OPCAutomation::OPCStatusConfigError,
       1216, OPCAutomation::OPCStatusNotConnected,
       1238, OPCAutomation::OPCStatusDeviceFailure,
       1261, OPCAutomation::OPCStatusSensorFailure,
       1284, OPCAutomation::OPCStatusLastKnown,
       1303, OPCAutomation::OPCStatusCommFailure,
       1324, OPCAutomation::OPCStatusOutOfService,
       1346, OPCAutomation::OPCStatusLastUsable,
       1366, OPCAutomation::OPCStatusSensorCal,
       1385, OPCAutomation::OPCStatusEGUExceeded,
       1406, OPCAutomation::OPCStatusSubNormal,
       1425, OPCAutomation::OPCStatusLocalOverride,
       1448, OPCAutomation::OPCRunning,
       1459, OPCAutomation::OPCFailed,
       1469, OPCAutomation::OPCNoconfig,
       1481, OPCAutomation::OPCSuspended,
       1494, OPCAutomation::OPCTest,
       1502, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCBrowser() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCBrowser\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "GetAccessPaths(QString)\0ItemID\0QVariant\0\0GetItemID(QString)\0Leaf\0"
    "QString\0\0Item(QVariant)\0ItemSpecifier\0QString\0\0MoveDown(QString)\0Branch\0\0\0MoveTo(QStringList&)\0Branches\0\0\0MoveToRoot()\0\0\0\0MoveUp()\0\0\0\0SetAccessRights(int)\0AccessRights\0\0\0SetDataType(int)\0DataType\0\0\0SetFilter(QString)\0"
    "Filter\0\0\0ShowBranches()\0\0\0\0ShowLeafs()\0\0\0\0ShowLeafs(QVariant)\0Flat\0\0\0"
    "AccessRights\0int\0Count\0int\0CurrentPosition\0QString\0DataType\0int\0Filter\0QString\0Organization\0int\0_NewEnum\0IUnknown*\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCBrowser::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCBrowser(),
qt_meta_data_OPCAutomation__OPCBrowser }
};

void *OPCBrowser::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCBrowser()))
        return static_cast<void*>(const_cast<OPCBrowser*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__DIOPCServerEvent[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       4,    10, // methods
       1,    30, // properties
       8,    33, // enums/sets

 // signals: signature, parameters, type, tag, flags
       32, 71, 93, 94, 5,
       95, 120, 125, 126, 5,
       127, 153, 168, 169, 5,

 // slots: signature, parameters, type, tag, flags
       170, 194, 201, 202, 9,

 // properties: name, type, flags
       203, 211, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       219, 0x0, 2, 65, 
       235, 0x0, 2, 69, 
       249, 0x0, 16, 73, 
       259, 0x0, 2, 105, 
       277, 0x0, 4, 109, 
       288, 0x0, 5, 117, 
       305, 0x0, 13, 127, 
       322, 0x0, 6, 153, 

 // enum data: key, value
       337, OPCAutomation::OPCReadable,
       349, OPCAutomation::OPCWritable,
       361, OPCAutomation::OPCCache,
       370, OPCAutomation::OPCDevice,
       380, OPCAutomation::OPCInvalidHandle,
       397, OPCAutomation::OPCBadType,
       408, OPCAutomation::OPCPublic,
       418, OPCAutomation::OPCBadRights,
       431, OPCAutomation::OPCUnknownItemID,
       448, OPCAutomation::OPCInvalidItemID,
       465, OPCAutomation::OPCInvalidFilter,
       482, OPCAutomation::OPCUnknownPath,
       497, OPCAutomation::OPCRange,
       506, OPCAutomation::OPCDuplicateName,
       523, OPCAutomation::OPCUnsupportedRate,
       542, OPCAutomation::OPCClamp,
       551, OPCAutomation::OPCInuse,
       560, OPCAutomation::OPCInvalidConfig,
       577, OPCAutomation::OPCNotFound,
       589, OPCAutomation::OPCInvalidPID,
       603, OPCAutomation::OPCHierarchical,
       619, OPCAutomation::OPCFlat,
       627, OPCAutomation::OPCQualityMask,
       642, OPCAutomation::OPCQualityBad,
       656, OPCAutomation::OPCQualityUncertain,
       676, OPCAutomation::OPCQualityGood,
       691, OPCAutomation::OPCLimitMask,
       704, OPCAutomation::OPCLimitOk,
       715, OPCAutomation::OPCLimitLow,
       727, OPCAutomation::OPCLimitHigh,
       740, OPCAutomation::OPCLimitConst,
       754, OPCAutomation::OPCStatusMask,
       768, OPCAutomation::OPCStatusConfigError,
       789, OPCAutomation::OPCStatusNotConnected,
       811, OPCAutomation::OPCStatusDeviceFailure,
       834, OPCAutomation::OPCStatusSensorFailure,
       857, OPCAutomation::OPCStatusLastKnown,
       876, OPCAutomation::OPCStatusCommFailure,
       897, OPCAutomation::OPCStatusOutOfService,
       919, OPCAutomation::OPCStatusLastUsable,
       939, OPCAutomation::OPCStatusSensorCal,
       958, OPCAutomation::OPCStatusEGUExceeded,
       979, OPCAutomation::OPCStatusSubNormal,
       998, OPCAutomation::OPCStatusLocalOverride,
       1021, OPCAutomation::OPCRunning,
       1032, OPCAutomation::OPCFailed,
       1042, OPCAutomation::OPCNoconfig,
       1054, OPCAutomation::OPCSuspended,
       1067, OPCAutomation::OPCTest,
       1075, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__DIOPCServerEvent() {
    static const char stringdata0[] = {
    "OPCAutomation::DIOPCServerEvent\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "ServerShutDown(QString)\0Reason\0\0\0"
    "control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject DIOPCServerEvent::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__DIOPCServerEvent(),
qt_meta_data_OPCAutomation__DIOPCServerEvent }
};

void *DIOPCServerEvent::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__DIOPCServerEvent()))
        return static_cast<void*>(const_cast<DIOPCServerEvent*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__IOPCActivator[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       5,    10, // methods
       1,    35, // properties
       8,    38, // enums/sets

 // signals: signature, parameters, type, tag, flags
       29, 68, 90, 91, 5,
       92, 117, 122, 123, 5,
       124, 150, 165, 166, 5,

 // slots: signature, parameters, type, tag, flags
       167, 193, 207, 223, 11,
       224, 259, 282, 298, 9,

 // properties: name, type, flags
       299, 307, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       315, 0x0, 2, 70, 
       331, 0x0, 2, 74, 
       345, 0x0, 16, 78, 
       355, 0x0, 2, 110, 
       373, 0x0, 4, 114, 
       384, 0x0, 5, 122, 
       401, 0x0, 13, 132, 
       418, 0x0, 6, 158, 

 // enum data: key, value
       433, OPCAutomation::OPCReadable,
       445, OPCAutomation::OPCWritable,
       457, OPCAutomation::OPCCache,
       466, OPCAutomation::OPCDevice,
       476, OPCAutomation::OPCInvalidHandle,
       493, OPCAutomation::OPCBadType,
       504, OPCAutomation::OPCPublic,
       514, OPCAutomation::OPCBadRights,
       527, OPCAutomation::OPCUnknownItemID,
       544, OPCAutomation::OPCInvalidItemID,
       561, OPCAutomation::OPCInvalidFilter,
       578, OPCAutomation::OPCUnknownPath,
       593, OPCAutomation::OPCRange,
       602, OPCAutomation::OPCDuplicateName,
       619, OPCAutomation::OPCUnsupportedRate,
       638, OPCAutomation::OPCClamp,
       647, OPCAutomation::OPCInuse,
       656, OPCAutomation::OPCInvalidConfig,
       673, OPCAutomation::OPCNotFound,
       685, OPCAutomation::OPCInvalidPID,
       699, OPCAutomation::OPCHierarchical,
       715, OPCAutomation::OPCFlat,
       723, OPCAutomation::OPCQualityMask,
       738, OPCAutomation::OPCQualityBad,
       752, OPCAutomation::OPCQualityUncertain,
       772, OPCAutomation::OPCQualityGood,
       787, OPCAutomation::OPCLimitMask,
       800, OPCAutomation::OPCLimitOk,
       811, OPCAutomation::OPCLimitLow,
       823, OPCAutomation::OPCLimitHigh,
       836, OPCAutomation::OPCLimitConst,
       850, OPCAutomation::OPCStatusMask,
       864, OPCAutomation::OPCStatusConfigError,
       885, OPCAutomation::OPCStatusNotConnected,
       907, OPCAutomation::OPCStatusDeviceFailure,
       930, OPCAutomation::OPCStatusSensorFailure,
       953, OPCAutomation::OPCStatusLastKnown,
       972, OPCAutomation::OPCStatusCommFailure,
       993, OPCAutomation::OPCStatusOutOfService,
       1015, OPCAutomation::OPCStatusLastUsable,
       1035, OPCAutomation::OPCStatusSensorCal,
       1054, OPCAutomation::OPCStatusEGUExceeded,
       1075, OPCAutomation::OPCStatusSubNormal,
       1094, OPCAutomation::OPCStatusLocalOverride,
       1117, OPCAutomation::OPCRunning,
       1128, OPCAutomation::OPCFailed,
       1138, OPCAutomation::OPCNoconfig,
       1150, OPCAutomation::OPCSuspended,
       1163, OPCAutomation::OPCTest,
       1171, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__IOPCActivator() {
    static const char stringdata0[] = {
    "OPCAutomation::IOPCActivator\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "Attach(IUnknown*,QString)\0Server,ProgID\0IOPCAutoServer*\0\0Attach(IUnknown*,QString,QVariant)\0"
    "Server,ProgID,NodeName\0IOPCAutoServer*\0\0"
    "control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject IOPCActivator::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__IOPCActivator(),
qt_meta_data_OPCAutomation__IOPCActivator }
};

void *IOPCActivator::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__IOPCActivator()))
        return static_cast<void*>(const_cast<IOPCActivator*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCActivator[] = {

 // content:
       1,       // revision
       0,       // classname
       1,    10, // classinfo
       2,    12, // methods
       0,    0, // properties
       8,    22, // enums/sets

 // classinfo: key, value
       28, 40, 

 // signals: signature, parameters, type, tag, flags

 // slots: signature, parameters, type, tag, flags
       54, 80, 94, 110, 11,
       111, 146, 169, 185, 9,

 // enums: name, flags, count, data
       186, 0x0, 2, 54, 
       202, 0x0, 2, 58, 
       216, 0x0, 16, 62, 
       226, 0x0, 2, 94, 
       244, 0x0, 4, 98, 
       255, 0x0, 5, 106, 
       272, 0x0, 13, 116, 
       289, 0x0, 6, 142, 

 // enum data: key, value
       304, OPCAutomation::OPCReadable,
       316, OPCAutomation::OPCWritable,
       328, OPCAutomation::OPCCache,
       337, OPCAutomation::OPCDevice,
       347, OPCAutomation::OPCInvalidHandle,
       364, OPCAutomation::OPCBadType,
       375, OPCAutomation::OPCPublic,
       385, OPCAutomation::OPCBadRights,
       398, OPCAutomation::OPCUnknownItemID,
       415, OPCAutomation::OPCInvalidItemID,
       432, OPCAutomation::OPCInvalidFilter,
       449, OPCAutomation::OPCUnknownPath,
       464, OPCAutomation::OPCRange,
       473, OPCAutomation::OPCDuplicateName,
       490, OPCAutomation::OPCUnsupportedRate,
       509, OPCAutomation::OPCClamp,
       518, OPCAutomation::OPCInuse,
       527, OPCAutomation::OPCInvalidConfig,
       544, OPCAutomation::OPCNotFound,
       556, OPCAutomation::OPCInvalidPID,
       570, OPCAutomation::OPCHierarchical,
       586, OPCAutomation::OPCFlat,
       594, OPCAutomation::OPCQualityMask,
       609, OPCAutomation::OPCQualityBad,
       623, OPCAutomation::OPCQualityUncertain,
       643, OPCAutomation::OPCQualityGood,
       658, OPCAutomation::OPCLimitMask,
       671, OPCAutomation::OPCLimitOk,
       682, OPCAutomation::OPCLimitLow,
       694, OPCAutomation::OPCLimitHigh,
       707, OPCAutomation::OPCLimitConst,
       721, OPCAutomation::OPCStatusMask,
       735, OPCAutomation::OPCStatusConfigError,
       756, OPCAutomation::OPCStatusNotConnected,
       778, OPCAutomation::OPCStatusDeviceFailure,
       801, OPCAutomation::OPCStatusSensorFailure,
       824, OPCAutomation::OPCStatusLastKnown,
       843, OPCAutomation::OPCStatusCommFailure,
       864, OPCAutomation::OPCStatusOutOfService,
       886, OPCAutomation::OPCStatusLastUsable,
       906, OPCAutomation::OPCStatusSensorCal,
       925, OPCAutomation::OPCStatusEGUExceeded,
       946, OPCAutomation::OPCStatusSubNormal,
       965, OPCAutomation::OPCStatusLocalOverride,
       988, OPCAutomation::OPCRunning,
       999, OPCAutomation::OPCFailed,
       1009, OPCAutomation::OPCNoconfig,
       1021, OPCAutomation::OPCSuspended,
       1034, OPCAutomation::OPCTest,
       1042, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCActivator() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCActivator\0"
    "Interface 0\0IOPCActivator\0"
    ""
    "Attach(IUnknown*,QString)\0Server,ProgID\0IOPCAutoServer*\0\0Attach(IUnknown*,QString,QVariant)\0Server,ProgID,NodeName\0IOPCAutoServer*\0\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCActivator::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCActivator(),
qt_meta_data_OPCAutomation__OPCActivator }
};

void *OPCActivator::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCActivator()))
        return static_cast<void*>(const_cast<OPCActivator*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPCAutomation__OPCServer[] = {

 // content:
       1,       // revision
       0,       // classname
       2,    10, // classinfo
       14,    14, // methods
       15,    84, // properties
       8,    129, // enums/sets

 // classinfo: key, value
       25, 43, 
       60, 72, 

 // signals: signature, parameters, type, tag, flags
       87, 111, 118, 119, 5,

 // slots: signature, parameters, type, tag, flags
       120, 137, 144, 145, 11,
       146, 172, 184, 185, 9,
       186, 202, 203, 215, 9,
       216, 229, 230, 231, 9,
       232, 252, 262, 270, 9,
       271, 345, 392, 393, 9,
       394, 410, 411, 420, 11,
       421, 445, 450, 459, 9,
       460, 529, 572, 573, 9,
       574, 600, 601, 610, 9,
       611, 693, 741, 742, 9,
       743, 766, 777, 778, 9,
       779, 796, 805, 806, 9,

 // properties: name, type, flags
       807, 817, 0x02005001, 		 // int Bandwidth
       821, 833, 0x02005001, 		 // int BuildNumber
       837, 848, 0x0a005003, 		 // QString ClientName
       856, 868, 0x10005001, 		 // QDateTime CurrentTime
       878, 893, 0x10005001, 		 // QDateTime LastUpdateTime
       903, 912, 0x02005003, 		 // int LocaleID
       916, 929, 0x02005001, 		 // int MajorVersion
       933, 946, 0x02005001, 		 // int MinorVersion
       950, 960, 0x00005001, 		 // OPCGroups* OPCGroups
       971, 988, 0xff005001, 		 // QVariant PublicGroupNames
       997, 1008, 0x0a005001, 		 // QString ServerName
       1016, 1027, 0x0a005001, 		 // QString ServerNode
       1035, 1047, 0x02005001, 		 // int ServerState
       1051, 1061, 0x10005001, 		 // QDateTime StartTime
       1071, 1082, 0x0a005001, 		 // QString VendorInfo

 // enums: name, flags, count, data
       1090, 0x0, 2, 161, 
       1106, 0x0, 2, 165, 
       1120, 0x0, 16, 169, 
       1130, 0x0, 2, 201, 
       1148, 0x0, 4, 205, 
       1159, 0x0, 5, 213, 
       1176, 0x0, 13, 223, 
       1193, 0x0, 6, 249, 

 // enum data: key, value
       1208, OPCAutomation::OPCReadable,
       1220, OPCAutomation::OPCWritable,
       1232, OPCAutomation::OPCCache,
       1241, OPCAutomation::OPCDevice,
       1251, OPCAutomation::OPCInvalidHandle,
       1268, OPCAutomation::OPCBadType,
       1279, OPCAutomation::OPCPublic,
       1289, OPCAutomation::OPCBadRights,
       1302, OPCAutomation::OPCUnknownItemID,
       1319, OPCAutomation::OPCInvalidItemID,
       1336, OPCAutomation::OPCInvalidFilter,
       1353, OPCAutomation::OPCUnknownPath,
       1368, OPCAutomation::OPCRange,
       1377, OPCAutomation::OPCDuplicateName,
       1394, OPCAutomation::OPCUnsupportedRate,
       1413, OPCAutomation::OPCClamp,
       1422, OPCAutomation::OPCInuse,
       1431, OPCAutomation::OPCInvalidConfig,
       1448, OPCAutomation::OPCNotFound,
       1460, OPCAutomation::OPCInvalidPID,
       1474, OPCAutomation::OPCHierarchical,
       1490, OPCAutomation::OPCFlat,
       1498, OPCAutomation::OPCQualityMask,
       1513, OPCAutomation::OPCQualityBad,
       1527, OPCAutomation::OPCQualityUncertain,
       1547, OPCAutomation::OPCQualityGood,
       1562, OPCAutomation::OPCLimitMask,
       1575, OPCAutomation::OPCLimitOk,
       1586, OPCAutomation::OPCLimitLow,
       1598, OPCAutomation::OPCLimitHigh,
       1611, OPCAutomation::OPCLimitConst,
       1625, OPCAutomation::OPCStatusMask,
       1639, OPCAutomation::OPCStatusConfigError,
       1660, OPCAutomation::OPCStatusNotConnected,
       1682, OPCAutomation::OPCStatusDeviceFailure,
       1705, OPCAutomation::OPCStatusSensorFailure,
       1728, OPCAutomation::OPCStatusLastKnown,
       1747, OPCAutomation::OPCStatusCommFailure,
       1768, OPCAutomation::OPCStatusOutOfService,
       1790, OPCAutomation::OPCStatusLastUsable,
       1810, OPCAutomation::OPCStatusSensorCal,
       1829, OPCAutomation::OPCStatusEGUExceeded,
       1850, OPCAutomation::OPCStatusSubNormal,
       1869, OPCAutomation::OPCStatusLocalOverride,
       1892, OPCAutomation::OPCRunning,
       1903, OPCAutomation::OPCFailed,
       1913, OPCAutomation::OPCNoconfig,
       1925, OPCAutomation::OPCSuspended,
       1938, OPCAutomation::OPCTest,
       1946, OPCAutomation::OPCDisconnected,

        0        // eod
};

static const char *qt_meta_stringdata_OPCAutomation__OPCServer() {
    static const char stringdata0[] = {
    "OPCAutomation::OPCServer\0"
    "Event Interface 1\0DIOPCServerEvent\0Interface 0\0IOPCAutoServer\0"
    "ServerShutDown(QString)\0Reason\0\0\0"
    "Connect(QString)\0ProgID\0\0\0Connect(QString,QVariant)\0ProgID,Node\0\0\0CreateBrowser()\0\0OPCBrowser*\0\0Disconnect()\0"
    "\0\0\0GetErrorString(int)\0ErrorCode\0QString\0\0GetItemProperties(QString,int,QVariantList*,QVariantList&,QVariantList*&)\0ItemID,Count,PropertyIDs,PropertyValues,Errors\0\0\0GetOPCServers()\0\0QVariant\0\0GetOPCServers(QVariant)\0"
    "Node\0QVariant\0\0LookupItemIDs(QString,int,QVariantList*,QStringList&,QVariantList*&)\0ItemID,Count,PropertyIDs,NewItemIDs,Errors\0\0\0QueryAvailableLocaleIDs()\0\0QVariant\0\0QueryAvailableProperties(QString,int&,QVariantList*&,QStringList&,QVariantList*&)\0"
    "ItemID,Count,PropertyIDs,Descriptions,DataTypes\0\0\0SetClientName(QString)\0ClientName\0\0\0SetLocaleID(int)\0LocaleID\0\0\0"
    "Bandwidth\0int\0BuildNumber\0int\0ClientName\0QString\0CurrentTime\0QDateTime\0LastUpdateTime\0QDateTime\0"
    "LocaleID\0int\0MajorVersion\0int\0MinorVersion\0int\0OPCGroups\0OPCGroups*\0PublicGroupNames\0QVariant\0ServerName\0QString\0ServerNode\0QString\0ServerState\0int\0StartTime\0QDateTime\0VendorInfo\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_OPCAutomation)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_OPCAutomation, sizeof(qt_meta_enumstringdata_OPCAutomation));
    }

    return data;
};

const QMetaObject OPCServer::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPCAutomation__OPCServer(),
qt_meta_data_OPCAutomation__OPCServer }
};

void *OPCServer::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPCAutomation__OPCServer()))
        return static_cast<void*>(const_cast<OPCServer*>(this));
    return QAxObject::qt_metacast(_clname);
}

