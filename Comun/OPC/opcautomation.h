/****************************************************************************
**
** Namespace OPCAutomation generated by dumpcpp from type library
** C:\WINDOWS\system32\OPCDAAuto.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_OPCAUTOMATION_H
#define QAX_DUMPCPP_OPCAUTOMATION_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef OPCAUTOMATION_EXPORT
#define OPCAUTOMATION_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace OPCAutomation {

    enum OPCAccessRights {
        OPCReadable             = 1,
        OPCWritable             = 2
    };

    enum OPCDataSource {
        OPCCache                = 1,
        OPCDevice               = 2
    };

    enum OPCErrors {
        OPCInvalidHandle        = -1073479679,
        OPCBadType              = -1073479676,
        OPCPublic               = -1073479675,
        OPCBadRights            = -1073479674,
        OPCUnknownItemID        = -1073479673,
        OPCInvalidItemID        = -1073479672,
        OPCInvalidFilter        = -1073479671,
        OPCUnknownPath          = -1073479670,
        OPCRange                = -1073479669,
        OPCDuplicateName        = -1073479668,
        OPCUnsupportedRate      = 262157,
        OPCClamp                = 262158,
        OPCInuse                = 262159,
        OPCInvalidConfig        = -1073479664,
        OPCNotFound             = -1073479663,
        OPCInvalidPID           = -1073479165
    };

    enum OPCNamespaceTypes {
        OPCHierarchical         = 1,
        OPCFlat                 = 2
    };

    enum OPCQuality {
        OPCQualityMask          = 192,
        OPCQualityBad           = 0,
        OPCQualityUncertain     = 64,
        OPCQualityGood          = 192
    };

    enum OPCQualityLimits {
        OPCLimitMask            = 3,
        OPCLimitOk              = 0,
        OPCLimitLow             = 1,
        OPCLimitHigh            = 2,
        OPCLimitConst           = 3
    };

    enum OPCQualityStatus {
        OPCStatusMask           = 252,
        OPCStatusConfigError    = 4,
        OPCStatusNotConnected   = 8,
        OPCStatusDeviceFailure  = 12,
        OPCStatusSensorFailure  = 16,
        OPCStatusLastKnown      = 20,
        OPCStatusCommFailure    = 24,
        OPCStatusOutOfService   = 28,
        OPCStatusLastUsable     = 68,
        OPCStatusSensorCal      = 80,
        OPCStatusEGUExceeded    = 84,
        OPCStatusSubNormal      = 88,
        OPCStatusLocalOverride  = 216
    };

    enum OPCServerState {
        OPCRunning              = 1,
        OPCFailed               = 2,
        OPCNoconfig             = 3,
        OPCSuspended            = 4,
        OPCTest                 = 5,
        OPCDisconnected         = 6
    };

// forward declarations
    enum OPCNamespaceTypes;
    enum OPCDataSource;
    enum OPCAccessRights;
    enum OPCServerState;
    enum OPCErrors;
    enum OPCQuality;
    enum OPCQualityStatus;
    enum OPCQualityLimits;
    enum OPCNamespaceTypes;
    enum OPCDataSource;
    enum OPCAccessRights;
    enum OPCServerState;
    enum OPCErrors;
    enum OPCQuality;
    enum OPCQualityStatus;
    enum OPCQualityLimits;
    class OPCGroups;
    class OPCBrowser;
    class IOPCAutoServer;
    class OPCGroup;
    class OPCItems;
    class OPCItem;

class OPCAUTOMATION_EXPORT IOPCAutoServer : public QAxObject
{

public:
    IOPCAutoServer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Bandwidth

    Gets an estimate of current OPC server utilization as a percentage.

    */
    inline int Bandwidth() const; //Returns the value of Bandwidth

    /*
    Property BuildNumber

    Gets the build number for the OPC server.

    */
    inline int BuildNumber() const; //Returns the value of BuildNumber

    /*
    Property ClientName

    Gets the current client name.

    */
    inline QString ClientName() const; //Returns the value of ClientName
    inline void SetClientName(const QString& value); //Sets the value of the ClientName property

    /*
    Property CurrentTime

    Gets the current time of the OPC server.

    */
    inline QDateTime CurrentTime() const; //Returns the value of CurrentTime

    /*
    Property LastUpdateTime

    Gets the last time the OPC server sent a data update.

    */
    inline QDateTime LastUpdateTime() const; //Returns the value of LastUpdateTime

    /*
    Property LocaleID

    Gets the current language/locale setting.

    */
    inline int LocaleID() const; //Returns the value of LocaleID
    inline void SetLocaleID(int value); //Sets the value of the LocaleID property

    /*
    Property MajorVersion

    Gets the major version number for the OPC server.

    */
    inline int MajorVersion() const; //Returns the value of MajorVersion

    /*
    Property MinorVersion

    Gets the minor version number for the OPC server.

    */
    inline int MinorVersion() const; //Returns the value of MinorVersion

    /*
    Property OPCGroups

    The collection of OPCGroup Objects

    */
    inline OPCAutomation::OPCGroups* OPCGroups() const; //Returns the value of OPCGroups

    /*
    Property PublicGroupNames

    Gets a list of public group names.

    */
    inline QVariant PublicGroupNames() const; //Returns the value of PublicGroupNames

    /*
    Property ServerName

    Gets the OPC server name.

    */
    inline QString ServerName() const; //Returns the value of ServerName

    /*
    Property ServerNode

    Gets the OPC server node name.

    */
    inline QString ServerNode() const; //Returns the value of ServerNode

    /*
    Property ServerState

    Gets the current OPC server state.

    */
    inline int ServerState() const; //Returns the value of ServerState

    /*
    Property StartTime

    Gets the start time of the OPC server.

    */
    inline QDateTime StartTime() const; //Returns the value of StartTime

    /*
    Property VendorInfo

    Gets an identifier for the OPC server's vendor.

    */
    inline QString VendorInfo() const; //Returns the value of VendorInfo

    /*
    Method Connect

    Connects to an OPC Server with the specified name and node

    */
    inline void Connect(const QString& ProgID);

    /*
    Method Connect

    Connects to an OPC Server with the specified name and node

    */
    inline void Connect(const QString& ProgID, const QVariant& Node);

    /*
    Method CreateBrowser

    Create a new OPCBrowser Object

    */
    inline OPCAutomation::OPCBrowser* CreateBrowser();

    /*
    Method Disconnect

    Terminate the connection with the OPC Server

    */
    inline void Disconnect();

    /*
    Method GetErrorString

    Convert an error code to a descriptive string

    */
    inline QString GetErrorString(int ErrorCode);

    /*
    Method GetItemProperties

    Returns the properties for the specified item.

    */
    inline void GetItemProperties(const QString& ItemID, int Count, QVariantList* PropertyIDs, QVariantList& PropertyValues, QVariantList*& Errors);

    /*
    Method GetOPCServers

    Returns an array of Server names on the specified node

    */
    inline QVariant GetOPCServers();

    /*
    Method GetOPCServers

    Returns an array of Server names on the specified node

    */
    inline QVariant GetOPCServers(const QVariant& Node);

    /*
    Method LookupItemIDs

    Returns the item ids for the specified properties.

    */
    inline void LookupItemIDs(const QString& ItemID, int Count, QVariantList* PropertyIDs, QStringList& NewItemIDs, QVariantList*& Errors);

    /*
    Method QueryAvailableLocaleIDs

    Returns the LocaleIDs supported by this server

    */
    inline QVariant QueryAvailableLocaleIDs();

    /*
    Method QueryAvailableProperties

    Returns the properties available for the specified item.

    */
    inline void QueryAvailableProperties(const QString& ItemID, int& Count, QVariantList*& PropertyIDs, QStringList& Descriptions, QVariantList*& DataTypes);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT IOPCGroups : public QAxObject
{
public:
    IOPCGroups(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Gets number of groups in the collection.

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property DefaultGroupDeadband

    Gets the default deadband for the collection.

    */
    inline double DefaultGroupDeadband() const; //Returns the value of DefaultGroupDeadband
    inline void SetDefaultGroupDeadband(double value); //Sets the value of the DefaultGroupDeadband property

    /*
    Property DefaultGroupIsActive

    Gets the default active state for the collection.

    */
    inline bool DefaultGroupIsActive() const; //Returns the value of DefaultGroupIsActive
    inline void SetDefaultGroupIsActive(bool value); //Sets the value of the DefaultGroupIsActive property

    /*
    Property DefaultGroupLocaleID

    Gets the default locale setting for the collection.

    */
    inline int DefaultGroupLocaleID() const; //Returns the value of DefaultGroupLocaleID
    inline void SetDefaultGroupLocaleID(int value); //Sets the value of the DefaultGroupLocaleID property

    /*
    Property DefaultGroupTimeBias

    Gets the default time bias for the collection.

    */
    inline int DefaultGroupTimeBias() const; //Returns the value of DefaultGroupTimeBias
    inline void SetDefaultGroupTimeBias(int value); //Sets the value of the DefaultGroupTimeBias property

    /*
    Property DefaultGroupUpdateRate

    Gets the default update rate for the collection.

    */
    inline int DefaultGroupUpdateRate() const; //Returns the value of DefaultGroupUpdateRate
    inline void SetDefaultGroupUpdateRate(int value); //Sets the value of the DefaultGroupUpdateRate property

    /*
    Property Parent

    Returns the parent OPCServer

    */
    inline OPCAutomation::IOPCAutoServer* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Adds an OPCGroup to the collection

    */
    inline OPCAutomation::OPCGroup* Add();

    /*
    Method Add

    Adds an OPCGroup to the collection

    */
    inline OPCAutomation::OPCGroup* Add(const QVariant& Name);

    /*
    Method ConnectPublicGroup

    Adds an existing public OPCGroup to the collection

    */
    inline OPCAutomation::OPCGroup* ConnectPublicGroup(const QString& Name);

    /*
    Method GetOPCGroup

    Returns an OPCGroup specified by server handle or name

    */
    inline OPCAutomation::OPCGroup* GetOPCGroup(const QVariant& ItemSpecifier);

    /*
    Method Item

    Returns an OPCGroup by index (starts at 1) or name

    */
    inline OPCAutomation::OPCGroup* Item(const QVariant& ItemSpecifier);

    /*
    Method Remove

    Removes an OPCGroup specified by server handle or name

    */
    inline void Remove(const QVariant& ItemSpecifier);

    /*
    Method RemoveAll

    Remove all groups and their items

    */
    inline void RemoveAll();

    /*
    Method RemovePublicGroup

    Removes a public OPCGroup specified by server handle or name

    */
    inline void RemovePublicGroup(const QVariant& ItemSpecifier);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT IOPCGroup : public QAxObject
{
public:
    IOPCGroup(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ClientHandle

    Gets the group client handle.

    */
    inline int ClientHandle() const; //Returns the value of ClientHandle
    inline void SetClientHandle(int value); //Sets the value of the ClientHandle property

    /*
    Property DeadBand

    Gets the group deadband.

    */
    inline double DeadBand() const; //Returns the value of DeadBand
    inline void SetDeadBand(double value); //Sets the value of the DeadBand property

    /*
    Property IsActive

    Gets the group active state.

    */
    inline bool IsActive() const; //Returns the value of IsActive
    inline void SetIsActive(bool value); //Sets the value of the IsActive property

    /*
    Property IsPublic

    Indicates whether a group is public or private.

    */
    inline bool IsPublic() const; //Returns the value of IsPublic

    /*
    Property IsSubscribed

    Gets whether asynchronous updates are enabled.

    */
    inline bool IsSubscribed() const; //Returns the value of IsSubscribed
    inline void SetIsSubscribed(bool value); //Sets the value of the IsSubscribed property

    /*
    Property LocaleID

    Gets the group locale setting.

    */
    inline int LocaleID() const; //Returns the value of LocaleID
    inline void SetLocaleID(int value); //Sets the value of the LocaleID property

    /*
    Property Name

    Gets the group name.

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property OPCItems

    Returns the OPCItems collection

    */
    inline OPCAutomation::OPCItems* OPCItems() const; //Returns the value of OPCItems

    /*
    Property Parent

    Gets the parent OPCServer

    */
    inline OPCAutomation::IOPCAutoServer* Parent() const; //Returns the value of Parent

    /*
    Property ServerHandle

    Gets the group server handle.

    */
    inline int ServerHandle() const; //Returns the value of ServerHandle

    /*
    Property TimeBias

    Gets the group time bias.

    */
    inline int TimeBias() const; //Returns the value of TimeBias
    inline void SetTimeBias(int value); //Sets the value of the TimeBias property

    /*
    Property UpdateRate

    Gets the group update rate in milliseconds.

    */
    inline int UpdateRate() const; //Returns the value of UpdateRate
    inline void SetUpdateRate(int value); //Sets the value of the UpdateRate property

    /*
    Method AsyncCancel
    */
    inline void AsyncCancel(int CancelID);

    /*
    Method AsyncRead
    */
    inline void AsyncRead(int NumItems, QVariantList* ServerHandles, QVariantList*& Errors, int TransactionID, int& CancelID);

    /*
    Method AsyncRefresh
    */
    inline void AsyncRefresh(int Source, int TransactionID, int& CancelID);

    /*
    Method AsyncWrite
    */
    inline void AsyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, int TransactionID, int& CancelID);

    /*
    Method SyncRead
    */
    inline void SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors);

    /*
    Method SyncRead
    */
    inline void SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities);

    /*
    Method SyncRead
    */
    inline void SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities, QVariant& TimeStamps);

    /*
    Method SyncWrite
    */
    inline void SyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT OPCItems : public QAxObject
{
public:
    OPCItems(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Gets the number of items in the Collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property DefaultAccessPath

    Gets the default access path for the collection.

    */
    inline QString DefaultAccessPath() const; //Returns the value of DefaultAccessPath
    inline void SetDefaultAccessPath(const QString& value); //Sets the value of the DefaultAccessPath property

    /*
    Property DefaultIsActive

    Gets the default active state for the collection.

    */
    inline bool DefaultIsActive() const; //Returns the value of DefaultIsActive
    inline void SetDefaultIsActive(bool value); //Sets the value of the DefaultIsActive property

    /*
    Property DefaultRequestedDataType

    Gets the default requessted data type for the collection.

    */
    inline int DefaultRequestedDataType() const; //Returns the value of DefaultRequestedDataType
    inline void SetDefaultRequestedDataType(int value); //Sets the value of the DefaultRequestedDataType property

    /*
    Property Parent

    Returns the parent OPCGroup

    */
    inline OPCAutomation::OPCGroup* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddItem

    Adds an OPCItem object to the collection

    */
    inline OPCAutomation::OPCItem* AddItem(const QString& ItemID, int ClientHandle);

    /*
    Method AddItems

    Adds OPCItem objects to the collection

    */
    inline void AddItems(int NumItems, QStringList& ItemIDs, QVariantList* ClientHandles, QVariantList*& ServerHandles, QVariantList*& Errors);

    /*
    Method AddItems

    Adds OPCItem objects to the collection

    */
    inline void AddItems(int NumItems, QStringList& ItemIDs, QVariantList* ClientHandles, QVariantList*& ServerHandles, QVariantList*& Errors, const QVariant& RequestedDataTypes);

    /*
    Method AddItems

    Adds OPCItem objects to the collection

    */
    inline void AddItems(int NumItems, QStringList& ItemIDs, QVariantList* ClientHandles, QVariantList*& ServerHandles, QVariantList*& Errors, const QVariant& RequestedDataTypes, const QVariant& AccessPaths);

    /*
    Method GetOPCItem

    Returns an OPCItem specified by server handle

    */
    inline OPCAutomation::OPCItem* GetOPCItem(int ServerHandle);

    /*
    Method Item

    Returns an OPCItem by index (starts at 1)

    */
    inline OPCAutomation::OPCItem* Item(const QVariant& ItemSpecifier);

    /*
    Method Remove

    Removes OPCItem objects from the collection

    */
    inline void Remove(int NumItems, QVariantList* ServerHandles, QVariantList*& Errors);

    /*
    Method SetActive

    Set the active state of OPCItem objects

    */
    inline void SetActive(int NumItems, QVariantList* ServerHandles, bool ActiveState, QVariantList*& Errors);

    /*
    Method SetClientHandles

    Set the Client handles of OPCItem objects

    */
    inline void SetClientHandles(int NumItems, QVariantList* ServerHandles, QVariantList* ClientHandles, QVariantList*& Errors);

    /*
    Method SetDataTypes

    Set the Data Types of OPCItem objects

    */
    inline void SetDataTypes(int NumItems, QVariantList* ServerHandles, QVariantList* RequestedDataTypes, QVariantList*& Errors);

    /*
    Method Validate

    Validates a set of item ids without adding them to the collection.

    */
    inline void Validate(int NumItems, QStringList& ItemIDs, QVariantList*& Errors);

    /*
    Method Validate

    Validates a set of item ids without adding them to the collection.

    */
    inline void Validate(int NumItems, QStringList& ItemIDs, QVariantList*& Errors, const QVariant& RequestedDataTypes);

    /*
    Method Validate

    Validates a set of item ids without adding them to the collection.

    */
    inline void Validate(int NumItems, QStringList& ItemIDs, QVariantList*& Errors, const QVariant& RequestedDataTypes, const QVariant& AccessPaths);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT OPCItem : public QAxObject
{
public:
    OPCItem(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AccessPath

    Gets the item access path.

    */
    inline QString AccessPath() const; //Returns the value of AccessPath

    /*
    Property AccessRights

    Gets the item access rights.

    */
    inline int AccessRights() const; //Returns the value of AccessRights

    /*
    Property CanonicalDataType

    Gets the item canonical data type.

    */
    inline int CanonicalDataType() const; //Returns the value of CanonicalDataType

    /*
    Property ClientHandle

    Gets the item client handle.

    */
    inline int ClientHandle() const; //Returns the value of ClientHandle
    inline void SetClientHandle(int value); //Sets the value of the ClientHandle property

    /*
    Property EUInfo

    Gets the item EU info.

    */
    inline QVariant EUInfo() const; //Returns the value of EUInfo

    /*
    Property EUType

    Gets the item EU type.

    */
    inline int EUType() const; //Returns the value of EUType

    /*
    Property IsActive

    Gets the item active state.

    */
    inline bool IsActive() const; //Returns the value of IsActive
    inline void SetIsActive(bool value); //Sets the value of the IsActive property

    /*
    Property ItemID

    Gets the item id.

    */
    inline QString ItemID() const; //Returns the value of ItemID

    /*
    Property Parent

    Returns the parent OPCGroup.

    */
    inline OPCAutomation::OPCGroup* Parent() const; //Returns the value of Parent

    /*
    Property Quality

    Gets the current item value quality.

    */
    inline int Quality() const; //Returns the value of Quality

    /*
    Property RequestedDataType

    Gets the item requested data type.

    */
    inline int RequestedDataType() const; //Returns the value of RequestedDataType
    inline void SetRequestedDataType(int value); //Sets the value of the RequestedDataType property

    /*
    Property ServerHandle

    Gets the item server handle.

    */
    inline int ServerHandle() const; //Returns the value of ServerHandle

    /*
    Property TimeStamp

    Gets the current item value timestamp.

    */
    inline QDateTime TimeStamp() const; //Returns the value of TimeStamp

    /*
    Property Value

    Gets the current item value.

    */
    inline QVariant Value() const; //Returns the value of Value

    /*
    Method Read
    */
    inline void Read(int Source);

    /*
    Method Read
    */
    inline void Read(int Source, QVariant& Value);

    /*
    Method Read
    */
    inline void Read(int Source, QVariant& Value, QVariant& Quality);

    /*
    Method Read
    */
    inline void Read(int Source, QVariant& Value, QVariant& Quality, QVariant& TimeStamp);

    /*
    Method Write
    */
    inline void Write(const QVariant& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT DIOPCGroupEvent : public QAxObject
{
public:
    DIOPCGroupEvent(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AsyncCancelComplete
    */
    inline void AsyncCancelComplete(int CancelID);

    /*
    Method AsyncReadComplete
    */
    inline void AsyncReadComplete(int TransactionID, int NumItems, QVariantList* ClientHandles, QVariantList& ItemValues, QVariantList* Qualities, QVariantList* TimeStamps, QVariantList* Errors);

    /*
    Method AsyncWriteComplete
    */
    inline void AsyncWriteComplete(int TransactionID, int NumItems, QVariantList* ClientHandles, QVariantList* Errors);

    /*
    Method DataChange
    */
    inline void DataChange(int TransactionID, int NumItems, QVariantList* ClientHandles, QVariantList& ItemValues, QVariantList* Qualities, QVariantList* TimeStamps);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT DIOPCGroupsEvent : public QAxObject
{
public:
    DIOPCGroupsEvent(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method GlobalDataChange
    */
    inline void GlobalDataChange(int TransactionID, int GroupHandle, int NumItems, QVariantList* ClientHandles, QVariantList& ItemValues, QVariantList* Qualities, QVariantList* TimeStamps);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT OPCBrowser : public QAxObject
{
public:
    OPCBrowser(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AccessRights

    Gets the access rights filter used when browsing.

    */
    inline int AccessRights() const; //Returns the value of AccessRights
    inline void SetAccessRights(int value); //Sets the value of the AccessRights property

    /*
    Property Count

    Gets the number of items in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property CurrentPosition

    Gets the current position in the tree.

    */
    inline QString CurrentPosition() const; //Returns the value of CurrentPosition

    /*
    Property DataType

    Gets the data type filter used when browsing.

    */
    inline int DataType() const; //Returns the value of DataType
    inline void SetDataType(int value); //Sets the value of the DataType property

    /*
    Property Filter

    Gets the text filter used when browsing.

    */
    inline QString Filter() const; //Returns the value of Filter
    inline void SetFilter(const QString& value); //Sets the value of the Filter property

    /*
    Property Organization

    Gets the OPC server namespace space type.

    */
    inline int Organization() const; //Returns the value of Organization

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method GetAccessPaths

    Returns an array of Access Paths for an ItemID

    */
    inline QVariant GetAccessPaths(const QString& ItemID);

    /*
    Method GetItemID

    Converts a leaf name to an ItemID

    */
    inline QString GetItemID(const QString& Leaf);

    /*
    Method Item

    An indexer (starts at 1) for the current set of branch or leaf names.

    */
    inline QString Item(const QVariant& ItemSpecifier);

    /*
    Method MoveDown

    Move down into this branch.

    */
    inline void MoveDown(const QString& Branch);

    /*
    Method MoveTo

    Move to this absolute position.

    */
    inline void MoveTo(QStringList& Branches);

    /*
    Method MoveToRoot

    Move up to the top (root) of the tree.

    */
    inline void MoveToRoot();

    /*
    Method MoveUp

    Move up a level in the tree.

    */
    inline void MoveUp();

    /*
    Method ShowBranches

    Returns all branch names that match the current filters.

    */
    inline void ShowBranches();

    /*
    Method ShowLeafs

    Returns all leaf names that match the current filters.

    */
    inline void ShowLeafs();

    /*
    Method ShowLeafs

    Returns all leaf names that match the current filters.

    */
    inline void ShowLeafs(const QVariant& Flat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT DIOPCServerEvent : public QAxObject
{
public:
    DIOPCServerEvent(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method ServerShutDown
    */
    inline void ServerShutDown(const QString& Reason);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT IOPCActivator : public QAxObject
{
public:
    IOPCActivator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Attach

    Returns an automation wrapper instance for an server existing COM server.

    */
    inline OPCAutomation::IOPCAutoServer* Attach(IUnknown* Server, const QString& ProgID);

    /*
    Method Attach

    Returns an automation wrapper instance for an server existing COM server.

    */
    inline OPCAutomation::IOPCAutoServer* Attach(IUnknown* Server, const QString& ProgID, const QVariant& NodeName);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class OPCAUTOMATION_EXPORT OPCGroups : public QAxObject
{
public:
    OPCGroups(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{28e68f9e-8d75-11d1-8dc3-3c302a000000}");
    }

    OPCGroups(IOPCGroups *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Gets number of groups in the collection.

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property DefaultGroupDeadband

    Gets the default deadband for the collection.

    */
    inline double DefaultGroupDeadband() const; //Returns the value of DefaultGroupDeadband
    inline void SetDefaultGroupDeadband(double value); //Sets the value of the DefaultGroupDeadband property

    /*
    Property DefaultGroupIsActive

    Gets the default active state for the collection.

    */
    inline bool DefaultGroupIsActive() const; //Returns the value of DefaultGroupIsActive
    inline void SetDefaultGroupIsActive(bool value); //Sets the value of the DefaultGroupIsActive property

    /*
    Property DefaultGroupLocaleID

    Gets the default locale setting for the collection.

    */
    inline int DefaultGroupLocaleID() const; //Returns the value of DefaultGroupLocaleID
    inline void SetDefaultGroupLocaleID(int value); //Sets the value of the DefaultGroupLocaleID property

    /*
    Property DefaultGroupTimeBias

    Gets the default time bias for the collection.

    */
    inline int DefaultGroupTimeBias() const; //Returns the value of DefaultGroupTimeBias
    inline void SetDefaultGroupTimeBias(int value); //Sets the value of the DefaultGroupTimeBias property

    /*
    Property DefaultGroupUpdateRate

    Gets the default update rate for the collection.

    */
    inline int DefaultGroupUpdateRate() const; //Returns the value of DefaultGroupUpdateRate
    inline void SetDefaultGroupUpdateRate(int value); //Sets the value of the DefaultGroupUpdateRate property

    /*
    Property Parent

    Returns the parent OPCServer

    */
    inline OPCAutomation::IOPCAutoServer* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Adds an OPCGroup to the collection

    */
    inline OPCAutomation::OPCGroup* Add();

    /*
    Method Add

    Adds an OPCGroup to the collection

    */
    inline OPCAutomation::OPCGroup* Add(const QVariant& Name);

    /*
    Method ConnectPublicGroup

    Adds an existing public OPCGroup to the collection

    */
    inline OPCAutomation::OPCGroup* ConnectPublicGroup(const QString& Name);

    /*
    Method GetOPCGroup

    Returns an OPCGroup specified by server handle or name

    */
    inline OPCAutomation::OPCGroup* GetOPCGroup(const QVariant& ItemSpecifier);

    /*
    Method Item

    Returns an OPCGroup by index (starts at 1) or name

    */
    inline OPCAutomation::OPCGroup* Item(const QVariant& ItemSpecifier);

    /*
    Method Remove

    Removes an OPCGroup specified by server handle or name

    */
    inline void Remove(const QVariant& ItemSpecifier);

    /*
    Method RemoveAll

    Remove all groups and their items

    */
    inline void RemoveAll();

    /*
    Method RemovePublicGroup

    Removes a public OPCGroup specified by server handle or name

    */
    inline void RemovePublicGroup(const QVariant& ItemSpecifier);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT OPCGroup : public QAxObject
{
public:
    OPCGroup(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{28e68f9b-8d75-11d1-8dc3-3c302a000000}");
    }

    OPCGroup(IOPCGroup *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClientHandle

    Gets the group client handle.

    */
    inline int ClientHandle() const; //Returns the value of ClientHandle
    inline void SetClientHandle(int value); //Sets the value of the ClientHandle property

    /*
    Property DeadBand

    Gets the group deadband.

    */
    inline double DeadBand() const; //Returns the value of DeadBand
    inline void SetDeadBand(double value); //Sets the value of the DeadBand property

    /*
    Property IsActive

    Gets the group active state.

    */
    inline bool IsActive() const; //Returns the value of IsActive
    inline void SetIsActive(bool value); //Sets the value of the IsActive property

    /*
    Property IsPublic

    Indicates whether a group is public or private.

    */
    inline bool IsPublic() const; //Returns the value of IsPublic

    /*
    Property IsSubscribed

    Gets whether asynchronous updates are enabled.

    */
    inline bool IsSubscribed() const; //Returns the value of IsSubscribed
    inline void SetIsSubscribed(bool value); //Sets the value of the IsSubscribed property

    /*
    Property LocaleID

    Gets the group locale setting.

    */
    inline int LocaleID() const; //Returns the value of LocaleID
    inline void SetLocaleID(int value); //Sets the value of the LocaleID property

    /*
    Property Name

    Gets the group name.

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property OPCItems

    Returns the OPCItems collection

    */
    inline OPCAutomation::OPCItems* OPCItems() const; //Returns the value of OPCItems

    /*
    Property Parent

    Gets the parent OPCServer

    */
    inline OPCAutomation::IOPCAutoServer* Parent() const; //Returns the value of Parent

    /*
    Property ServerHandle

    Gets the group server handle.

    */
    inline int ServerHandle() const; //Returns the value of ServerHandle

    /*
    Property TimeBias

    Gets the group time bias.

    */
    inline int TimeBias() const; //Returns the value of TimeBias
    inline void SetTimeBias(int value); //Sets the value of the TimeBias property

    /*
    Property UpdateRate

    Gets the group update rate in milliseconds.

    */
    inline int UpdateRate() const; //Returns the value of UpdateRate
    inline void SetUpdateRate(int value); //Sets the value of the UpdateRate property

    /*
    Method AsyncCancel
    */
    inline void AsyncCancel(int CancelID);

    /*
    Method AsyncRead
    */
    inline void AsyncRead(int NumItems, QVariantList* ServerHandles, QVariantList*& Errors, int TransactionID, int& CancelID);

    /*
    Method AsyncRefresh
    */
    inline void AsyncRefresh(int Source, int TransactionID, int& CancelID);

    /*
    Method AsyncWrite
    */
    inline void AsyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, int TransactionID, int& CancelID);

    /*
    Method SyncRead
    */
    inline void SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors);

    /*
    Method SyncRead
    */
    inline void SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities);

    /*
    Method SyncRead
    */
    inline void SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities, QVariant& TimeStamps);

    /*
    Method SyncWrite
    */
    inline void SyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT OPCActivator : public QAxObject
{
public:
    OPCActivator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{860a4801-46a4-478b-a776-7f3a019369e3}");
    }

    OPCActivator(IOPCActivator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Attach

    Returns an automation wrapper instance for an server existing COM server.

    */
    inline OPCAutomation::IOPCAutoServer* Attach(IUnknown* Server, const QString& ProgID);

    /*
    Method Attach

    Returns an automation wrapper instance for an server existing COM server.

    */
    inline OPCAutomation::IOPCAutoServer* Attach(IUnknown* Server, const QString& ProgID, const QVariant& NodeName);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPCAUTOMATION_EXPORT OPCServer : public QAxObject
{
    Q_CLASSINFO("DefaultProperty","OPCGroups()")

public:
    OPCServer(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{28e68f9a-8d75-11d1-8dc3-3c302a000000}");
    }

    OPCServer(IOPCAutoServer *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Bandwidth

    Gets an estimate of current OPC server utilization as a percentage.

    */
    inline int Bandwidth() const; //Returns the value of Bandwidth

    /*
    Property BuildNumber

    Gets the build number for the OPC server.

    */
    inline int BuildNumber() const; //Returns the value of BuildNumber

    /*
    Property ClientName

    Gets the current client name.

    */
    inline QString ClientName() const; //Returns the value of ClientName
    inline void SetClientName(const QString& value); //Sets the value of the ClientName property

    /*
    Property CurrentTime

    Gets the current time of the OPC server.

    */
    inline QDateTime CurrentTime() const; //Returns the value of CurrentTime

    /*
    Property LastUpdateTime

    Gets the last time the OPC server sent a data update.

    */
    inline QDateTime LastUpdateTime() const; //Returns the value of LastUpdateTime

    /*
    Property LocaleID

    Gets the current language/locale setting.

    */
    inline int LocaleID() const; //Returns the value of LocaleID
    inline void SetLocaleID(int value); //Sets the value of the LocaleID property

    /*
    Property MajorVersion

    Gets the major version number for the OPC server.

    */
    inline int MajorVersion() const; //Returns the value of MajorVersion

    /*
    Property MinorVersion

    Gets the minor version number for the OPC server.

    */
    inline int MinorVersion() const; //Returns the value of MinorVersion

    /*
    Property OPCGroups

    The collection of OPCGroup Objects

    */
    inline OPCAutomation::OPCGroups* OPCGroups() const; //Returns the value of OPCGroups

    /*
    Property PublicGroupNames

    Gets a list of public group names.

    */
    inline QVariant PublicGroupNames() const; //Returns the value of PublicGroupNames

    /*
    Property ServerName

    Gets the OPC server name.

    */
    inline QString ServerName() const; //Returns the value of ServerName

    /*
    Property ServerNode

    Gets the OPC server node name.

    */
    inline QString ServerNode() const; //Returns the value of ServerNode

    /*
    Property ServerState

    Gets the current OPC server state.

    */
    inline int ServerState() const; //Returns the value of ServerState

    /*
    Property StartTime

    Gets the start time of the OPC server.

    */
    inline QDateTime StartTime() const; //Returns the value of StartTime

    /*
    Property VendorInfo

    Gets an identifier for the OPC server's vendor.

    */
    inline QString VendorInfo() const; //Returns the value of VendorInfo

    /*
    Method Connect

    Connects to an OPC Server with the specified name and node

    */
    inline void Connect(const QString& ProgID);

    /*
    Method Connect

    Connects to an OPC Server with the specified name and node

    */
    inline void Connect(const QString& ProgID, const QVariant& Node);

    /*
    Method CreateBrowser

    Create a new OPCBrowser Object

    */
    inline OPCAutomation::OPCBrowser* CreateBrowser();

    /*
    Method Disconnect

    Terminate the connection with the OPC Server

    */
    inline void Disconnect();

    /*
    Method GetErrorString

    Convert an error code to a descriptive string

    */
    inline QString GetErrorString(int ErrorCode);

    /*
    Method GetItemProperties

    Returns the properties for the specified item.

    */
    inline void GetItemProperties(const QString& ItemID, int Count, QVariantList* PropertyIDs, QVariantList& PropertyValues, QVariantList*& Errors);

    /*
    Method GetOPCServers

    Returns an array of Server names on the specified node

    */
    inline QVariant GetOPCServers();

    /*
    Method GetOPCServers

    Returns an array of Server names on the specified node

    */
    inline QVariant GetOPCServers(const QVariant& Node);

    /*
    Method LookupItemIDs

    Returns the item ids for the specified properties.

    */
    inline void LookupItemIDs(const QString& ItemID, int Count, QVariantList* PropertyIDs, QStringList& NewItemIDs, QVariantList*& Errors);

    /*
    Method QueryAvailableLocaleIDs

    Returns the LocaleIDs supported by this server

    */
    inline QVariant QueryAvailableLocaleIDs();

    /*
    Method QueryAvailableProperties

    Returns the properties available for the specified item.

    */
    inline void QueryAvailableProperties(const QString& ItemID, int& Count, QVariantList*& PropertyIDs, QStringList& Descriptions, QVariantList*& DataTypes);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_OPCAUTOMATION_NOINLINES
inline int IOPCAutoServer::Bandwidth() const
{
    QVariant qax_result = property("Bandwidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPCAutoServer::BuildNumber() const
{
    QVariant qax_result = property("BuildNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IOPCAutoServer::ClientName() const
{
    QVariant qax_result = property("ClientName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IOPCAutoServer::SetClientName(const QString& value){ setProperty("ClientName", QVariant(value)); }

inline QDateTime IOPCAutoServer::CurrentTime() const
{
    QVariant qax_result = property("CurrentTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline QDateTime IOPCAutoServer::LastUpdateTime() const
{
    QVariant qax_result = property("LastUpdateTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline int IOPCAutoServer::LocaleID() const
{
    QVariant qax_result = property("LocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCAutoServer::SetLocaleID(int value){ setProperty("LocaleID", QVariant(value)); }

inline int IOPCAutoServer::MajorVersion() const
{
    QVariant qax_result = property("MajorVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPCAutoServer::MinorVersion() const
{
    QVariant qax_result = property("MinorVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline OPCAutomation::OPCGroups* IOPCAutoServer::OPCGroups() const
{
    OPCAutomation::OPCGroups* qax_pointer = 0;
    qRegisterMetaType("OPCGroups*", &qax_pointer);
    qRegisterMetaType("OPCGroups", qax_pointer);
    QVariant qax_result = property("OPCGroups");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::OPCGroups**)qax_result.constData();
}

inline QVariant IOPCAutoServer::PublicGroupNames() const
{
    QVariant qax_result = property("PublicGroupNames");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QString IOPCAutoServer::ServerName() const
{
    QVariant qax_result = property("ServerName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IOPCAutoServer::ServerNode() const
{
    QVariant qax_result = property("ServerNode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPCAutoServer::ServerState() const
{
    QVariant qax_result = property("ServerState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QDateTime IOPCAutoServer::StartTime() const
{
    QVariant qax_result = property("StartTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline QString IOPCAutoServer::VendorInfo() const
{
    QVariant qax_result = property("VendorInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IOPCAutoServer::Connect(const QString& ProgID)
{
    void *_a[] = {0, (void*)&ProgID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void IOPCAutoServer::Connect(const QString& ProgID, const QVariant& Node)
{
    void *_a[] = {0, (void*)&ProgID, (void*)&Node};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline OPCAutomation::OPCBrowser* IOPCAutoServer::CreateBrowser()
{
    OPCAutomation::OPCBrowser* qax_result = 0;
    qRegisterMetaType("OPCBrowser*", &qax_result);
    qRegisterMetaType("OPCBrowser", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IOPCAutoServer::Disconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline QString IOPCAutoServer::GetErrorString(int ErrorCode)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ErrorCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IOPCAutoServer::GetItemProperties(const QString& ItemID, int Count, QVariantList* PropertyIDs, QVariantList& PropertyValues, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&ItemID, (void*)&Count, (void*)&PropertyIDs, (void*)&PropertyValues, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline QVariant IOPCAutoServer::GetOPCServers()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant IOPCAutoServer::GetOPCServers(const QVariant& Node)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Node};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IOPCAutoServer::LookupItemIDs(const QString& ItemID, int Count, QVariantList* PropertyIDs, QStringList& NewItemIDs, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&ItemID, (void*)&Count, (void*)&PropertyIDs, (void*)&NewItemIDs, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline QVariant IOPCAutoServer::QueryAvailableLocaleIDs()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IOPCAutoServer::QueryAvailableProperties(const QString& ItemID, int& Count, QVariantList*& PropertyIDs, QStringList& Descriptions, QVariantList*& DataTypes)
{
    void *_a[] = {0, (void*)&ItemID, (void*)&Count, (void*)&PropertyIDs, (void*)&Descriptions, (void*)&DataTypes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}


inline int OPCGroups::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double OPCGroups::DefaultGroupDeadband() const
{
    QVariant qax_result = property("DefaultGroupDeadband");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OPCGroups::SetDefaultGroupDeadband(double value){ setProperty("DefaultGroupDeadband", QVariant(value)); }

inline bool OPCGroups::DefaultGroupIsActive() const
{
    QVariant qax_result = property("DefaultGroupIsActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPCGroups::SetDefaultGroupIsActive(bool value){ setProperty("DefaultGroupIsActive", QVariant(value)); }

inline int OPCGroups::DefaultGroupLocaleID() const
{
    QVariant qax_result = property("DefaultGroupLocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroups::SetDefaultGroupLocaleID(int value){ setProperty("DefaultGroupLocaleID", QVariant(value)); }

inline int OPCGroups::DefaultGroupTimeBias() const
{
    QVariant qax_result = property("DefaultGroupTimeBias");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroups::SetDefaultGroupTimeBias(int value){ setProperty("DefaultGroupTimeBias", QVariant(value)); }

inline int OPCGroups::DefaultGroupUpdateRate() const
{
    QVariant qax_result = property("DefaultGroupUpdateRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroups::SetDefaultGroupUpdateRate(int value){ setProperty("DefaultGroupUpdateRate", QVariant(value)); }

inline OPCAutomation::IOPCAutoServer* OPCGroups::Parent() const
{
    OPCAutomation::IOPCAutoServer* qax_pointer = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_pointer);
    qRegisterMetaType("IOPCAutoServer", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::IOPCAutoServer**)qax_result.constData();
}

inline IUnknown* OPCGroups::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline OPCAutomation::OPCGroup* OPCGroups::Add()
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 5, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* OPCGroups::Add(const QVariant& Name)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 6, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* OPCGroups::ConnectPublicGroup(const QString& Name)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* OPCGroups::GetOPCGroup(const QVariant& ItemSpecifier)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* OPCGroups::Item(const QVariant& ItemSpecifier)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void OPCGroups::Remove(const QVariant& ItemSpecifier)
{
    void *_a[] = {0, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void OPCGroups::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void OPCGroups::RemovePublicGroup(const QVariant& ItemSpecifier)
{
    void *_a[] = {0, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int IOPCGroups::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double IOPCGroups::DefaultGroupDeadband() const
{
    QVariant qax_result = property("DefaultGroupDeadband");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IOPCGroups::SetDefaultGroupDeadband(double value){ setProperty("DefaultGroupDeadband", QVariant(value)); }

inline bool IOPCGroups::DefaultGroupIsActive() const
{
    QVariant qax_result = property("DefaultGroupIsActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPCGroups::SetDefaultGroupIsActive(bool value){ setProperty("DefaultGroupIsActive", QVariant(value)); }

inline int IOPCGroups::DefaultGroupLocaleID() const
{
    QVariant qax_result = property("DefaultGroupLocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroups::SetDefaultGroupLocaleID(int value){ setProperty("DefaultGroupLocaleID", QVariant(value)); }

inline int IOPCGroups::DefaultGroupTimeBias() const
{
    QVariant qax_result = property("DefaultGroupTimeBias");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroups::SetDefaultGroupTimeBias(int value){ setProperty("DefaultGroupTimeBias", QVariant(value)); }

inline int IOPCGroups::DefaultGroupUpdateRate() const
{
    QVariant qax_result = property("DefaultGroupUpdateRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroups::SetDefaultGroupUpdateRate(int value){ setProperty("DefaultGroupUpdateRate", QVariant(value)); }

inline OPCAutomation::IOPCAutoServer* IOPCGroups::Parent() const
{
    OPCAutomation::IOPCAutoServer* qax_pointer = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_pointer);
    qRegisterMetaType("IOPCAutoServer", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::IOPCAutoServer**)qax_result.constData();
}

inline IUnknown* IOPCGroups::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline OPCAutomation::OPCGroup* IOPCGroups::Add()
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* IOPCGroups::Add(const QVariant& Name)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* IOPCGroups::ConnectPublicGroup(const QString& Name)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* IOPCGroups::GetOPCGroup(const QVariant& ItemSpecifier)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline OPCAutomation::OPCGroup* IOPCGroups::Item(const QVariant& ItemSpecifier)
{
    OPCAutomation::OPCGroup* qax_result = 0;
    qRegisterMetaType("OPCGroup*", &qax_result);
    qRegisterMetaType("OPCGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IOPCGroups::Remove(const QVariant& ItemSpecifier)
{
    void *_a[] = {0, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IOPCGroups::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IOPCGroups::RemovePublicGroup(const QVariant& ItemSpecifier)
{
    void *_a[] = {0, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline int OPCGroup::ClientHandle() const
{
    QVariant qax_result = property("ClientHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroup::SetClientHandle(int value){ setProperty("ClientHandle", QVariant(value)); }

inline double OPCGroup::DeadBand() const
{
    QVariant qax_result = property("DeadBand");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OPCGroup::SetDeadBand(double value){ setProperty("DeadBand", QVariant(value)); }

inline bool OPCGroup::IsActive() const
{
    QVariant qax_result = property("IsActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPCGroup::SetIsActive(bool value){ setProperty("IsActive", QVariant(value)); }

inline bool OPCGroup::IsPublic() const
{
    QVariant qax_result = property("IsPublic");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool OPCGroup::IsSubscribed() const
{
    QVariant qax_result = property("IsSubscribed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPCGroup::SetIsSubscribed(bool value){ setProperty("IsSubscribed", QVariant(value)); }

inline int OPCGroup::LocaleID() const
{
    QVariant qax_result = property("LocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroup::SetLocaleID(int value){ setProperty("LocaleID", QVariant(value)); }

inline QString OPCGroup::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OPCGroup::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline OPCAutomation::OPCItems* OPCGroup::OPCItems() const
{
    OPCAutomation::OPCItems* qax_pointer = 0;
    qRegisterMetaType("OPCItems*", &qax_pointer);
    qRegisterMetaType("OPCItems", qax_pointer);
    QVariant qax_result = property("OPCItems");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::OPCItems**)qax_result.constData();
}

inline OPCAutomation::IOPCAutoServer* OPCGroup::Parent() const
{
    OPCAutomation::IOPCAutoServer* qax_pointer = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_pointer);
    qRegisterMetaType("IOPCAutoServer", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::IOPCAutoServer**)qax_result.constData();
}

inline int OPCGroup::ServerHandle() const
{
    QVariant qax_result = property("ServerHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPCGroup::TimeBias() const
{
    QVariant qax_result = property("TimeBias");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroup::SetTimeBias(int value){ setProperty("TimeBias", QVariant(value)); }

inline int OPCGroup::UpdateRate() const
{
    QVariant qax_result = property("UpdateRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCGroup::SetUpdateRate(int value){ setProperty("UpdateRate", QVariant(value)); }

inline void OPCGroup::AsyncCancel(int CancelID)
{
    void *_a[] = {0, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void OPCGroup::AsyncRead(int NumItems, QVariantList* ServerHandles, QVariantList*& Errors, int TransactionID, int& CancelID)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Errors, (void*)&TransactionID, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void OPCGroup::AsyncRefresh(int Source, int TransactionID, int& CancelID)
{
    void *_a[] = {0, (void*)&Source, (void*)&TransactionID, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void OPCGroup::AsyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, int TransactionID, int& CancelID)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors, (void*)&TransactionID, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void OPCGroup::SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&Source, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void OPCGroup::SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities)
{
    void *_a[] = {0, (void*)&Source, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors, (void*)&Qualities};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void OPCGroup::SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities, QVariant& TimeStamps)
{
    void *_a[] = {0, (void*)&Source, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors, (void*)&Qualities, (void*)&TimeStamps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void OPCGroup::SyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}


inline int IOPCGroup::ClientHandle() const
{
    QVariant qax_result = property("ClientHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroup::SetClientHandle(int value){ setProperty("ClientHandle", QVariant(value)); }

inline double IOPCGroup::DeadBand() const
{
    QVariant qax_result = property("DeadBand");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IOPCGroup::SetDeadBand(double value){ setProperty("DeadBand", QVariant(value)); }

inline bool IOPCGroup::IsActive() const
{
    QVariant qax_result = property("IsActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPCGroup::SetIsActive(bool value){ setProperty("IsActive", QVariant(value)); }

inline bool IOPCGroup::IsPublic() const
{
    QVariant qax_result = property("IsPublic");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPCGroup::IsSubscribed() const
{
    QVariant qax_result = property("IsSubscribed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPCGroup::SetIsSubscribed(bool value){ setProperty("IsSubscribed", QVariant(value)); }

inline int IOPCGroup::LocaleID() const
{
    QVariant qax_result = property("LocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroup::SetLocaleID(int value){ setProperty("LocaleID", QVariant(value)); }

inline QString IOPCGroup::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IOPCGroup::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline OPCAutomation::OPCItems* IOPCGroup::OPCItems() const
{
    OPCAutomation::OPCItems* qax_pointer = 0;
    qRegisterMetaType("OPCItems*", &qax_pointer);
    qRegisterMetaType("OPCItems", qax_pointer);
    QVariant qax_result = property("OPCItems");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::OPCItems**)qax_result.constData();
}

inline OPCAutomation::IOPCAutoServer* IOPCGroup::Parent() const
{
    OPCAutomation::IOPCAutoServer* qax_pointer = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_pointer);
    qRegisterMetaType("IOPCAutoServer", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::IOPCAutoServer**)qax_result.constData();
}

inline int IOPCGroup::ServerHandle() const
{
    QVariant qax_result = property("ServerHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPCGroup::TimeBias() const
{
    QVariant qax_result = property("TimeBias");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroup::SetTimeBias(int value){ setProperty("TimeBias", QVariant(value)); }

inline int IOPCGroup::UpdateRate() const
{
    QVariant qax_result = property("UpdateRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPCGroup::SetUpdateRate(int value){ setProperty("UpdateRate", QVariant(value)); }

inline void IOPCGroup::AsyncCancel(int CancelID)
{
    void *_a[] = {0, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void IOPCGroup::AsyncRead(int NumItems, QVariantList* ServerHandles, QVariantList*& Errors, int TransactionID, int& CancelID)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Errors, (void*)&TransactionID, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IOPCGroup::AsyncRefresh(int Source, int TransactionID, int& CancelID)
{
    void *_a[] = {0, (void*)&Source, (void*)&TransactionID, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IOPCGroup::AsyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, int TransactionID, int& CancelID)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors, (void*)&TransactionID, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IOPCGroup::SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&Source, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IOPCGroup::SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities)
{
    void *_a[] = {0, (void*)&Source, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors, (void*)&Qualities};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IOPCGroup::SyncRead(int Source, int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors, QVariant& Qualities, QVariant& TimeStamps)
{
    void *_a[] = {0, (void*)&Source, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors, (void*)&Qualities, (void*)&TimeStamps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IOPCGroup::SyncWrite(int NumItems, QVariantList* ServerHandles, QVariantList& Values, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Values, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline int OPCItems::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString OPCItems::DefaultAccessPath() const
{
    QVariant qax_result = property("DefaultAccessPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OPCItems::SetDefaultAccessPath(const QString& value){ setProperty("DefaultAccessPath", QVariant(value)); }

inline bool OPCItems::DefaultIsActive() const
{
    QVariant qax_result = property("DefaultIsActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPCItems::SetDefaultIsActive(bool value){ setProperty("DefaultIsActive", QVariant(value)); }

inline int OPCItems::DefaultRequestedDataType() const
{
    QVariant qax_result = property("DefaultRequestedDataType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCItems::SetDefaultRequestedDataType(int value){ setProperty("DefaultRequestedDataType", QVariant(value)); }

inline OPCAutomation::OPCGroup* OPCItems::Parent() const
{
    OPCAutomation::OPCGroup* qax_pointer = 0;
    qRegisterMetaType("OPCGroup*", &qax_pointer);
    qRegisterMetaType("OPCGroup", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::OPCGroup**)qax_result.constData();
}

inline IUnknown* OPCItems::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline OPCAutomation::OPCItem* OPCItems::AddItem(const QString& ItemID, int ClientHandle)
{
    OPCAutomation::OPCItem* qax_result = 0;
    qRegisterMetaType("OPCItem*", &qax_result);
    qRegisterMetaType("OPCItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemID, (void*)&ClientHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void OPCItems::AddItems(int NumItems, QStringList& ItemIDs, QVariantList* ClientHandles, QVariantList*& ServerHandles, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ItemIDs, (void*)&ClientHandles, (void*)&ServerHandles, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void OPCItems::AddItems(int NumItems, QStringList& ItemIDs, QVariantList* ClientHandles, QVariantList*& ServerHandles, QVariantList*& Errors, const QVariant& RequestedDataTypes)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ItemIDs, (void*)&ClientHandles, (void*)&ServerHandles, (void*)&Errors, (void*)&RequestedDataTypes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void OPCItems::AddItems(int NumItems, QStringList& ItemIDs, QVariantList* ClientHandles, QVariantList*& ServerHandles, QVariantList*& Errors, const QVariant& RequestedDataTypes, const QVariant& AccessPaths)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ItemIDs, (void*)&ClientHandles, (void*)&ServerHandles, (void*)&Errors, (void*)&RequestedDataTypes, (void*)&AccessPaths};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline OPCAutomation::OPCItem* OPCItems::GetOPCItem(int ServerHandle)
{
    OPCAutomation::OPCItem* qax_result = 0;
    qRegisterMetaType("OPCItem*", &qax_result);
    qRegisterMetaType("OPCItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ServerHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline OPCAutomation::OPCItem* OPCItems::Item(const QVariant& ItemSpecifier)
{
    OPCAutomation::OPCItem* qax_result = 0;
    qRegisterMetaType("OPCItem*", &qax_result);
    qRegisterMetaType("OPCItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void OPCItems::Remove(int NumItems, QVariantList* ServerHandles, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void OPCItems::SetActive(int NumItems, QVariantList* ServerHandles, bool ActiveState, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&ActiveState, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void OPCItems::SetClientHandles(int NumItems, QVariantList* ServerHandles, QVariantList* ClientHandles, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&ClientHandles, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void OPCItems::SetDataTypes(int NumItems, QVariantList* ServerHandles, QVariantList* RequestedDataTypes, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ServerHandles, (void*)&RequestedDataTypes, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void OPCItems::Validate(int NumItems, QStringList& ItemIDs, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ItemIDs, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void OPCItems::Validate(int NumItems, QStringList& ItemIDs, QVariantList*& Errors, const QVariant& RequestedDataTypes)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ItemIDs, (void*)&Errors, (void*)&RequestedDataTypes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void OPCItems::Validate(int NumItems, QStringList& ItemIDs, QVariantList*& Errors, const QVariant& RequestedDataTypes, const QVariant& AccessPaths)
{
    void *_a[] = {0, (void*)&NumItems, (void*)&ItemIDs, (void*)&Errors, (void*)&RequestedDataTypes, (void*)&AccessPaths};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline QString OPCItem::AccessPath() const
{
    QVariant qax_result = property("AccessPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int OPCItem::AccessRights() const
{
    QVariant qax_result = property("AccessRights");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPCItem::CanonicalDataType() const
{
    QVariant qax_result = property("CanonicalDataType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPCItem::ClientHandle() const
{
    QVariant qax_result = property("ClientHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCItem::SetClientHandle(int value){ setProperty("ClientHandle", QVariant(value)); }

inline QVariant OPCItem::EUInfo() const
{
    QVariant qax_result = property("EUInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline int OPCItem::EUType() const
{
    QVariant qax_result = property("EUType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool OPCItem::IsActive() const
{
    QVariant qax_result = property("IsActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPCItem::SetIsActive(bool value){ setProperty("IsActive", QVariant(value)); }

inline QString OPCItem::ItemID() const
{
    QVariant qax_result = property("ItemID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline OPCAutomation::OPCGroup* OPCItem::Parent() const
{
    OPCAutomation::OPCGroup* qax_pointer = 0;
    qRegisterMetaType("OPCGroup*", &qax_pointer);
    qRegisterMetaType("OPCGroup", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::OPCGroup**)qax_result.constData();
}

inline int OPCItem::Quality() const
{
    QVariant qax_result = property("Quality");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPCItem::RequestedDataType() const
{
    QVariant qax_result = property("RequestedDataType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCItem::SetRequestedDataType(int value){ setProperty("RequestedDataType", QVariant(value)); }

inline int OPCItem::ServerHandle() const
{
    QVariant qax_result = property("ServerHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QDateTime OPCItem::TimeStamp() const
{
    QVariant qax_result = property("TimeStamp");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline QVariant OPCItem::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline void OPCItem::Read(int Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void OPCItem::Read(int Source, QVariant& Value)
{
    void *_a[] = {0, (void*)&Source, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void OPCItem::Read(int Source, QVariant& Value, QVariant& Quality)
{
    void *_a[] = {0, (void*)&Source, (void*)&Value, (void*)&Quality};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void OPCItem::Read(int Source, QVariant& Value, QVariant& Quality, QVariant& TimeStamp)
{
    void *_a[] = {0, (void*)&Source, (void*)&Value, (void*)&Quality, (void*)&TimeStamp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void OPCItem::Write(const QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline void DIOPCGroupEvent::AsyncCancelComplete(int CancelID)
{
    void *_a[] = {0, (void*)&CancelID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void DIOPCGroupEvent::AsyncReadComplete(int TransactionID, int NumItems, QVariantList* ClientHandles, QVariantList& ItemValues, QVariantList* Qualities, QVariantList* TimeStamps, QVariantList* Errors)
{
    void *_a[] = {0, (void*)&TransactionID, (void*)&NumItems, (void*)&ClientHandles, (void*)&ItemValues, (void*)&Qualities, (void*)&TimeStamps, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void DIOPCGroupEvent::AsyncWriteComplete(int TransactionID, int NumItems, QVariantList* ClientHandles, QVariantList* Errors)
{
    void *_a[] = {0, (void*)&TransactionID, (void*)&NumItems, (void*)&ClientHandles, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void DIOPCGroupEvent::DataChange(int TransactionID, int NumItems, QVariantList* ClientHandles, QVariantList& ItemValues, QVariantList* Qualities, QVariantList* TimeStamps)
{
    void *_a[] = {0, (void*)&TransactionID, (void*)&NumItems, (void*)&ClientHandles, (void*)&ItemValues, (void*)&Qualities, (void*)&TimeStamps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline void DIOPCGroupsEvent::GlobalDataChange(int TransactionID, int GroupHandle, int NumItems, QVariantList* ClientHandles, QVariantList& ItemValues, QVariantList* Qualities, QVariantList* TimeStamps)
{
    void *_a[] = {0, (void*)&TransactionID, (void*)&GroupHandle, (void*)&NumItems, (void*)&ClientHandles, (void*)&ItemValues, (void*)&Qualities, (void*)&TimeStamps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline int OPCBrowser::AccessRights() const
{
    QVariant qax_result = property("AccessRights");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCBrowser::SetAccessRights(int value){ setProperty("AccessRights", QVariant(value)); }

inline int OPCBrowser::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString OPCBrowser::CurrentPosition() const
{
    QVariant qax_result = property("CurrentPosition");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int OPCBrowser::DataType() const
{
    QVariant qax_result = property("DataType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCBrowser::SetDataType(int value){ setProperty("DataType", QVariant(value)); }

inline QString OPCBrowser::Filter() const
{
    QVariant qax_result = property("Filter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OPCBrowser::SetFilter(const QString& value){ setProperty("Filter", QVariant(value)); }

inline int OPCBrowser::Organization() const
{
    QVariant qax_result = property("Organization");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* OPCBrowser::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QVariant OPCBrowser::GetAccessPaths(const QString& ItemID)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ItemID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QString OPCBrowser::GetItemID(const QString& Leaf)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Leaf};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString OPCBrowser::Item(const QVariant& ItemSpecifier)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ItemSpecifier};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void OPCBrowser::MoveDown(const QString& Branch)
{
    void *_a[] = {0, (void*)&Branch};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void OPCBrowser::MoveTo(QStringList& Branches)
{
    void *_a[] = {0, (void*)&Branches};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void OPCBrowser::MoveToRoot()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void OPCBrowser::MoveUp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void OPCBrowser::ShowBranches()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void OPCBrowser::ShowLeafs()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void OPCBrowser::ShowLeafs(const QVariant& Flat)
{
    void *_a[] = {0, (void*)&Flat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline void DIOPCServerEvent::ServerShutDown(const QString& Reason)
{
    void *_a[] = {0, (void*)&Reason};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline OPCAutomation::IOPCAutoServer* IOPCActivator::Attach(IUnknown* Server, const QString& ProgID)
{
    OPCAutomation::IOPCAutoServer* qax_result = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_result);
    qRegisterMetaType("IOPCAutoServer", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Server, (void*)&ProgID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline OPCAutomation::IOPCAutoServer* IOPCActivator::Attach(IUnknown* Server, const QString& ProgID, const QVariant& NodeName)
{
    OPCAutomation::IOPCAutoServer* qax_result = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_result);
    qRegisterMetaType("IOPCAutoServer", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Server, (void*)&ProgID, (void*)&NodeName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline OPCAutomation::IOPCAutoServer* OPCActivator::Attach(IUnknown* Server, const QString& ProgID)
{
    OPCAutomation::IOPCAutoServer* qax_result = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_result);
    qRegisterMetaType("IOPCAutoServer", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Server, (void*)&ProgID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 4, _a);
    return qax_result;
}

inline OPCAutomation::IOPCAutoServer* OPCActivator::Attach(IUnknown* Server, const QString& ProgID, const QVariant& NodeName)
{
    OPCAutomation::IOPCAutoServer* qax_result = 0;
    qRegisterMetaType("IOPCAutoServer*", &qax_result);
    qRegisterMetaType("IOPCAutoServer", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Server, (void*)&ProgID, (void*)&NodeName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 5, _a);
    return qax_result;
}


inline int OPCServer::Bandwidth() const
{
    QVariant qax_result = property("Bandwidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPCServer::BuildNumber() const
{
    QVariant qax_result = property("BuildNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString OPCServer::ClientName() const
{
    QVariant qax_result = property("ClientName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OPCServer::SetClientName(const QString& value){ setProperty("ClientName", QVariant(value)); }

inline QDateTime OPCServer::CurrentTime() const
{
    QVariant qax_result = property("CurrentTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline QDateTime OPCServer::LastUpdateTime() const
{
    QVariant qax_result = property("LastUpdateTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline int OPCServer::LocaleID() const
{
    QVariant qax_result = property("LocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPCServer::SetLocaleID(int value){ setProperty("LocaleID", QVariant(value)); }

inline int OPCServer::MajorVersion() const
{
    QVariant qax_result = property("MajorVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPCServer::MinorVersion() const
{
    QVariant qax_result = property("MinorVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline OPCAutomation::OPCGroups* OPCServer::OPCGroups() const
{
    OPCAutomation::OPCGroups* qax_pointer = 0;
    qRegisterMetaType("OPCGroups*", &qax_pointer);
    qRegisterMetaType("OPCGroups", qax_pointer);
    QVariant qax_result = property("OPCGroups");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OPCAutomation::OPCGroups**)qax_result.constData();
}

inline QVariant OPCServer::PublicGroupNames() const
{
    QVariant qax_result = property("PublicGroupNames");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QString OPCServer::ServerName() const
{
    QVariant qax_result = property("ServerName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString OPCServer::ServerNode() const
{
    QVariant qax_result = property("ServerNode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int OPCServer::ServerState() const
{
    QVariant qax_result = property("ServerState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QDateTime OPCServer::StartTime() const
{
    QVariant qax_result = property("StartTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline QString OPCServer::VendorInfo() const
{
    QVariant qax_result = property("VendorInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void OPCServer::Connect(const QString& ProgID)
{
    void *_a[] = {0, (void*)&ProgID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 5, _a);
}

inline void OPCServer::Connect(const QString& ProgID, const QVariant& Node)
{
    void *_a[] = {0, (void*)&ProgID, (void*)&Node};
    qt_metacall(QMetaObject::InvokeMetaMethod, 6, _a);
}

inline OPCAutomation::OPCBrowser* OPCServer::CreateBrowser()
{
    OPCAutomation::OPCBrowser* qax_result = 0;
    qRegisterMetaType("OPCBrowser*", &qax_result);
    qRegisterMetaType("OPCBrowser", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void OPCServer::Disconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QString OPCServer::GetErrorString(int ErrorCode)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ErrorCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void OPCServer::GetItemProperties(const QString& ItemID, int Count, QVariantList* PropertyIDs, QVariantList& PropertyValues, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&ItemID, (void*)&Count, (void*)&PropertyIDs, (void*)&PropertyValues, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline QVariant OPCServer::GetOPCServers()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QVariant OPCServer::GetOPCServers(const QVariant& Node)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Node};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void OPCServer::LookupItemIDs(const QString& ItemID, int Count, QVariantList* PropertyIDs, QStringList& NewItemIDs, QVariantList*& Errors)
{
    void *_a[] = {0, (void*)&ItemID, (void*)&Count, (void*)&PropertyIDs, (void*)&NewItemIDs, (void*)&Errors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline QVariant OPCServer::QueryAvailableLocaleIDs()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void OPCServer::QueryAvailableProperties(const QString& ItemID, int& Count, QVariantList*& PropertyIDs, QStringList& Descriptions, QVariantList*& DataTypes)
{
    void *_a[] = {0, (void*)&ItemID, (void*)&Count, (void*)&PropertyIDs, (void*)&Descriptions, (void*)&DataTypes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::IOPCAutoServer *t)
{ Q_ASSERT(!t); return new OPCAutomation::IOPCAutoServer; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCGroups *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCGroups; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::IOPCGroups *t)
{ Q_ASSERT(!t); return new OPCAutomation::IOPCGroups; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCGroup *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCGroup; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::IOPCGroup *t)
{ Q_ASSERT(!t); return new OPCAutomation::IOPCGroup; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCItems *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCItems; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCItem *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCItem; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::DIOPCGroupEvent *t)
{ Q_ASSERT(!t); return new OPCAutomation::DIOPCGroupEvent; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::DIOPCGroupsEvent *t)
{ Q_ASSERT(!t); return new OPCAutomation::DIOPCGroupsEvent; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCBrowser *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCBrowser; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::DIOPCServerEvent *t)
{ Q_ASSERT(!t); return new OPCAutomation::DIOPCServerEvent; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::IOPCActivator *t)
{ Q_ASSERT(!t); return new OPCAutomation::IOPCActivator; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCActivator *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCActivator; }

template<>
inline void *qMetaTypeConstructHelper(const OPCAutomation::OPCServer *t)
{ Q_ASSERT(!t); return new OPCAutomation::OPCServer; }

#endif

